//
// WalletAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class WalletAPI {
    /**
     * enum for parameter currency
     */
    public enum Currency_privateAddToAddressBookGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateAddToAddressBookGet: String {
        case transfer = "transfer"
        case withdrawal = "withdrawal"
    }

    /**
     Adds new entry to address book of given type
     
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter name: (query) Name of address book entry 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateAddToAddressBookGet(currency: Currency_privateAddToAddressBookGet, type: ModelType_privateAddToAddressBookGet, address: String, name: String, tfa: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateAddToAddressBookGetWithRequestBuilder(currency: currency, type: type, address: address, name: name, tfa: tfa).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Adds new entry to address book of given type
     - GET /private/add_to_address_book
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter name: (query) Name of address book entry 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateAddToAddressBookGetWithRequestBuilder(currency: Currency_privateAddToAddressBookGet, type: ModelType_privateAddToAddressBookGet, address: String, name: String, tfa: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/add_to_address_book"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "type": type.rawValue, 
            "address": address, 
            "name": name, 
            "tfa": tfa
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateCancelTransferByIdGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Cancel transfer
     
     - parameter currency: (query) The currency symbol 
     - parameter id: (query) Id of transfer 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateCancelTransferByIdGet(currency: Currency_privateCancelTransferByIdGet, id: Int, tfa: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateCancelTransferByIdGetWithRequestBuilder(currency: currency, id: id, tfa: tfa).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Cancel transfer
     - GET /private/cancel_transfer_by_id
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter id: (query) Id of transfer 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateCancelTransferByIdGetWithRequestBuilder(currency: Currency_privateCancelTransferByIdGet, id: Int, tfa: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/cancel_transfer_by_id"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "id": id.encodeToJSON(), 
            "tfa": tfa
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateCancelWithdrawalGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Cancels withdrawal request
     
     - parameter currency: (query) The currency symbol 
     - parameter id: (query) The withdrawal id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateCancelWithdrawalGet(currency: Currency_privateCancelWithdrawalGet, id: Double, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateCancelWithdrawalGetWithRequestBuilder(currency: currency, id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Cancels withdrawal request
     - GET /private/cancel_withdrawal
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter id: (query) The withdrawal id 
     - returns: RequestBuilder<Any> 
     */
    open class func privateCancelWithdrawalGetWithRequestBuilder(currency: Currency_privateCancelWithdrawalGet, id: Double) -> RequestBuilder<Any> {
        let path = "/private/cancel_withdrawal"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "id": id
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateCreateDepositAddressGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Creates deposit address in currency
     
     - parameter currency: (query) The currency symbol 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateCreateDepositAddressGet(currency: Currency_privateCreateDepositAddressGet, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateCreateDepositAddressGetWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Creates deposit address in currency
     - GET /private/create_deposit_address
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - returns: RequestBuilder<Any> 
     */
    open class func privateCreateDepositAddressGetWithRequestBuilder(currency: Currency_privateCreateDepositAddressGet) -> RequestBuilder<Any> {
        let path = "/private/create_deposit_address"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetAddressBookGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateGetAddressBookGet: String {
        case transfer = "transfer"
        case withdrawal = "withdrawal"
    }

    /**
     Retrieves address book of given type
     
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetAddressBookGet(currency: Currency_privateGetAddressBookGet, type: ModelType_privateGetAddressBookGet, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetAddressBookGetWithRequestBuilder(currency: currency, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves address book of given type
     - GET /private/get_address_book
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetAddressBookGetWithRequestBuilder(currency: Currency_privateGetAddressBookGet, type: ModelType_privateGetAddressBookGet) -> RequestBuilder<Any> {
        let path = "/private/get_address_book"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "type": type.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetCurrentDepositAddressGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Retrieve deposit address for currency
     
     - parameter currency: (query) The currency symbol 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetCurrentDepositAddressGet(currency: Currency_privateGetCurrentDepositAddressGet, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetCurrentDepositAddressGetWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve deposit address for currency
     - GET /private/get_current_deposit_address
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetCurrentDepositAddressGetWithRequestBuilder(currency: Currency_privateGetCurrentDepositAddressGet) -> RequestBuilder<Any> {
        let path = "/private/get_current_deposit_address"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetDepositsGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Retrieve the latest users deposits
     
     - parameter currency: (query) The currency symbol 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetDepositsGet(currency: Currency_privateGetDepositsGet, count: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetDepositsGetWithRequestBuilder(currency: currency, count: count, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the latest users deposits
     - GET /private/get_deposits
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetDepositsGetWithRequestBuilder(currency: Currency_privateGetDepositsGet, count: Int? = nil, offset: Int? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_deposits"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "count": count?.encodeToJSON(), 
            "offset": offset?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetTransfersGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Adds new entry to address book of given type
     
     - parameter currency: (query) The currency symbol 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetTransfersGet(currency: Currency_privateGetTransfersGet, count: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetTransfersGetWithRequestBuilder(currency: currency, count: count, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Adds new entry to address book of given type
     - GET /private/get_transfers
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetTransfersGetWithRequestBuilder(currency: Currency_privateGetTransfersGet, count: Int? = nil, offset: Int? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_transfers"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "count": count?.encodeToJSON(), 
            "offset": offset?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetWithdrawalsGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Retrieve the latest users withdrawals
     
     - parameter currency: (query) The currency symbol 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetWithdrawalsGet(currency: Currency_privateGetWithdrawalsGet, count: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetWithdrawalsGetWithRequestBuilder(currency: currency, count: count, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the latest users withdrawals
     - GET /private/get_withdrawals
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetWithdrawalsGetWithRequestBuilder(currency: Currency_privateGetWithdrawalsGet, count: Int? = nil, offset: Int? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_withdrawals"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "count": count?.encodeToJSON(), 
            "offset": offset?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateRemoveFromAddressBookGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateRemoveFromAddressBookGet: String {
        case transfer = "transfer"
        case withdrawal = "withdrawal"
    }

    /**
     Adds new entry to address book of given type
     
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateRemoveFromAddressBookGet(currency: Currency_privateRemoveFromAddressBookGet, type: ModelType_privateRemoveFromAddressBookGet, address: String, tfa: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateRemoveFromAddressBookGetWithRequestBuilder(currency: currency, type: type, address: address, tfa: tfa).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Adds new entry to address book of given type
     - GET /private/remove_from_address_book
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateRemoveFromAddressBookGetWithRequestBuilder(currency: Currency_privateRemoveFromAddressBookGet, type: ModelType_privateRemoveFromAddressBookGet, address: String, tfa: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/remove_from_address_book"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "type": type.rawValue, 
            "address": address, 
            "tfa": tfa
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateSubmitTransferToSubaccountGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Transfer funds to a subaccount.
     
     - parameter currency: (query) The currency symbol 
     - parameter amount: (query) Amount of funds to be transferred 
     - parameter destination: (query) Id of destination subaccount 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSubmitTransferToSubaccountGet(currency: Currency_privateSubmitTransferToSubaccountGet, amount: Double, destination: Int, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSubmitTransferToSubaccountGetWithRequestBuilder(currency: currency, amount: amount, destination: destination).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Transfer funds to a subaccount.
     - GET /private/submit_transfer_to_subaccount
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter amount: (query) Amount of funds to be transferred 
     - parameter destination: (query) Id of destination subaccount 
     - returns: RequestBuilder<Any> 
     */
    open class func privateSubmitTransferToSubaccountGetWithRequestBuilder(currency: Currency_privateSubmitTransferToSubaccountGet, amount: Double, destination: Int) -> RequestBuilder<Any> {
        let path = "/private/submit_transfer_to_subaccount"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "amount": amount, 
            "destination": destination.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateSubmitTransferToUserGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Transfer funds to a another user.
     
     - parameter currency: (query) The currency symbol 
     - parameter amount: (query) Amount of funds to be transferred 
     - parameter destination: (query) Destination address from address book 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSubmitTransferToUserGet(currency: Currency_privateSubmitTransferToUserGet, amount: Double, destination: String, tfa: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSubmitTransferToUserGetWithRequestBuilder(currency: currency, amount: amount, destination: destination, tfa: tfa).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Transfer funds to a another user.
     - GET /private/submit_transfer_to_user
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter amount: (query) Amount of funds to be transferred 
     - parameter destination: (query) Destination address from address book 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateSubmitTransferToUserGetWithRequestBuilder(currency: Currency_privateSubmitTransferToUserGet, amount: Double, destination: String, tfa: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/submit_transfer_to_user"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "amount": amount, 
            "destination": destination, 
            "tfa": tfa
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateToggleDepositAddressCreationGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Enable or disable deposit address creation
     
     - parameter currency: (query) The currency symbol 
     - parameter state: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateToggleDepositAddressCreationGet(currency: Currency_privateToggleDepositAddressCreationGet, state: Bool, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateToggleDepositAddressCreationGetWithRequestBuilder(currency: currency, state: state).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Enable or disable deposit address creation
     - GET /private/toggle_deposit_address_creation
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter state: (query)  
     - returns: RequestBuilder<Any> 
     */
    open class func privateToggleDepositAddressCreationGetWithRequestBuilder(currency: Currency_privateToggleDepositAddressCreationGet, state: Bool) -> RequestBuilder<Any> {
        let path = "/private/toggle_deposit_address_creation"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "state": state
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateWithdrawGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter priority
     */
    public enum Priority_privateWithdrawGet: String {
        case insane = "insane"
        case extremeHigh = "extreme_high"
        case veryHigh = "very_high"
        case high = "high"
        case mid = "mid"
        case low = "low"
        case veryLow = "very_low"
    }

    /**
     Creates a new withdrawal request
     
     - parameter currency: (query) The currency symbol 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter amount: (query) Amount of funds to be withdrawn 
     - parameter priority: (query) Withdrawal priority, optional for BTC, default: &#x60;high&#x60; (optional)
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateWithdrawGet(currency: Currency_privateWithdrawGet, address: String, amount: Double, priority: Priority_privateWithdrawGet? = nil, tfa: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateWithdrawGetWithRequestBuilder(currency: currency, address: address, amount: amount, priority: priority, tfa: tfa).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Creates a new withdrawal request
     - GET /private/withdraw
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter amount: (query) Amount of funds to be withdrawn 
     - parameter priority: (query) Withdrawal priority, optional for BTC, default: &#x60;high&#x60; (optional)
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateWithdrawGetWithRequestBuilder(currency: Currency_privateWithdrawGet, address: String, amount: Double, priority: Priority_privateWithdrawGet? = nil, tfa: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/withdraw"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "address": address, 
            "amount": amount, 
            "priority": priority?.rawValue, 
            "tfa": tfa
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
