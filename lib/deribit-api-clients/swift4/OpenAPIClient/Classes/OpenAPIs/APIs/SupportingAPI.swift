//
// SupportingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class SupportingAPI {
    /**
     Retrieves the current time (in milliseconds). This API endpoint can be used to check the clock skew between your software and Deribit's systems.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetTimeGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetTimeGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves the current time (in milliseconds). This API endpoint can be used to check the clock skew between your software and Deribit's systems.
     - GET /public/get_time
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetTimeGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/public/get_time"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter expectedResult
     */
    public enum ExpectedResult_publicTestGet: String {
        case exception = "exception"
    }

    /**
     Tests the connection to the API server, and returns its version. You can use this to make sure the API is reachable, and matches the expected version.
     
     - parameter expectedResult: (query) The value \&quot;exception\&quot; will trigger an error response. This may be useful for testing wrapper libraries. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicTestGet(expectedResult: ExpectedResult_publicTestGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicTestGetWithRequestBuilder(expectedResult: expectedResult).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Tests the connection to the API server, and returns its version. You can use this to make sure the API is reachable, and matches the expected version.
     - GET /public/test
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter expectedResult: (query) The value \&quot;exception\&quot; will trigger an error response. This may be useful for testing wrapper libraries. (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func publicTestGetWithRequestBuilder(expectedResult: ExpectedResult_publicTestGet? = nil) -> RequestBuilder<Any> {
        let path = "/public/test"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expected_result": expectedResult?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
