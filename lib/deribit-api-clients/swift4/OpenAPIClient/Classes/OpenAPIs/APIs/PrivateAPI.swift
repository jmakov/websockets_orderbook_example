//
// PrivateAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class PrivateAPI {
    /**
     * enum for parameter currency
     */
    public enum Currency_privateAddToAddressBookGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateAddToAddressBookGet: String {
        case transfer = "transfer"
        case withdrawal = "withdrawal"
    }

    /**
     Adds new entry to address book of given type
     
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter name: (query) Name of address book entry 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateAddToAddressBookGet(currency: Currency_privateAddToAddressBookGet, type: ModelType_privateAddToAddressBookGet, address: String, name: String, tfa: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateAddToAddressBookGetWithRequestBuilder(currency: currency, type: type, address: address, name: name, tfa: tfa).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Adds new entry to address book of given type
     - GET /private/add_to_address_book
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter name: (query) Name of address book entry 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateAddToAddressBookGetWithRequestBuilder(currency: Currency_privateAddToAddressBookGet, type: ModelType_privateAddToAddressBookGet, address: String, name: String, tfa: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/add_to_address_book"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "type": type.rawValue, 
            "address": address, 
            "name": name, 
            "tfa": tfa
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateBuyGet: String {
        case limit = "limit"
        case stopLimit = "stop_limit"
        case market = "market"
        case stopMarket = "stop_market"
    }

    /**
     * enum for parameter timeInForce
     */
    public enum TimeInForce_privateBuyGet: String {
        case goodTilCancelled = "good_til_cancelled"
        case fillOrKill = "fill_or_kill"
        case immediateOrCancel = "immediate_or_cancel"
    }

    /**
     * enum for parameter trigger
     */
    public enum Trigger_privateBuyGet: String {
        case indexPrice = "index_price"
        case markPrice = "mark_price"
        case lastPrice = "last_price"
    }

    /**
     * enum for parameter advanced
     */
    public enum Advanced_privateBuyGet: String {
        case usd = "usd"
        case implv = "implv"
    }

    /**
     Places a buy order for an instrument.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter amount: (query) It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH 
     - parameter type: (query) The order type, default: &#x60;\&quot;limit\&quot;&#x60; (optional)
     - parameter label: (query) user defined label for the order (maximum 32 characters) (optional)
     - parameter price: (query) &lt;p&gt;The order price in base currency (Only for limit and stop_limit orders)&lt;/p&gt; &lt;p&gt;When adding order with advanced&#x3D;usd, the field price should be the option price value in USD.&lt;/p&gt; &lt;p&gt;When adding order with advanced&#x3D;implv, the field price should be a value of implied volatility in percentages. For example,  price&#x3D;100, means implied volatility of 100%&lt;/p&gt; (optional)
     - parameter timeInForce: (query) &lt;p&gt;Specifies how long the order remains in effect. Default &#x60;\&quot;good_til_cancelled\&quot;&#x60;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&#x60;\&quot;good_til_cancelled\&quot;&#x60; - unfilled order remains in order book until cancelled&lt;/li&gt; &lt;li&gt;&#x60;\&quot;fill_or_kill\&quot;&#x60; - execute a transaction immediately and completely or not at all&lt;/li&gt; &lt;li&gt;&#x60;\&quot;immediate_or_cancel\&quot;&#x60; - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled&lt;/li&gt; &lt;/ul&gt; (optional, default to .good_til_cancelled)
     - parameter maxShow: (query) Maximum amount within an order to be shown to other customers, &#x60;0&#x60; for invisible order (optional, default to 1)
     - parameter postOnly: (query) &lt;p&gt;If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the bid.&lt;/p&gt; &lt;p&gt;Only valid in combination with time_in_force&#x3D;&#x60;\&quot;good_til_cancelled\&quot;&#x60;&lt;/p&gt; (optional, default to true)
     - parameter reduceOnly: (query) If &#x60;true&#x60;, the order is considered reduce-only which is intended to only reduce a current position (optional, default to false)
     - parameter stopPrice: (query) Stop price, required for stop limit orders (Only for stop orders) (optional)
     - parameter trigger: (query) Defines trigger type, required for &#x60;\&quot;stop_limit\&quot;&#x60; order type (optional)
     - parameter advanced: (query) Advanced option order type. (Only for options) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateBuyGet(instrumentName: String, amount: Double, type: ModelType_privateBuyGet? = nil, label: String? = nil, price: Double? = nil, timeInForce: TimeInForce_privateBuyGet? = nil, maxShow: Double? = nil, postOnly: Bool? = nil, reduceOnly: Bool? = nil, stopPrice: Double? = nil, trigger: Trigger_privateBuyGet? = nil, advanced: Advanced_privateBuyGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateBuyGetWithRequestBuilder(instrumentName: instrumentName, amount: amount, type: type, label: label, price: price, timeInForce: timeInForce, maxShow: maxShow, postOnly: postOnly, reduceOnly: reduceOnly, stopPrice: stopPrice, trigger: trigger, advanced: advanced).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Places a buy order for an instrument.
     - GET /private/buy
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - parameter amount: (query) It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH 
     - parameter type: (query) The order type, default: &#x60;\&quot;limit\&quot;&#x60; (optional)
     - parameter label: (query) user defined label for the order (maximum 32 characters) (optional)
     - parameter price: (query) &lt;p&gt;The order price in base currency (Only for limit and stop_limit orders)&lt;/p&gt; &lt;p&gt;When adding order with advanced&#x3D;usd, the field price should be the option price value in USD.&lt;/p&gt; &lt;p&gt;When adding order with advanced&#x3D;implv, the field price should be a value of implied volatility in percentages. For example,  price&#x3D;100, means implied volatility of 100%&lt;/p&gt; (optional)
     - parameter timeInForce: (query) &lt;p&gt;Specifies how long the order remains in effect. Default &#x60;\&quot;good_til_cancelled\&quot;&#x60;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&#x60;\&quot;good_til_cancelled\&quot;&#x60; - unfilled order remains in order book until cancelled&lt;/li&gt; &lt;li&gt;&#x60;\&quot;fill_or_kill\&quot;&#x60; - execute a transaction immediately and completely or not at all&lt;/li&gt; &lt;li&gt;&#x60;\&quot;immediate_or_cancel\&quot;&#x60; - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled&lt;/li&gt; &lt;/ul&gt; (optional, default to .good_til_cancelled)
     - parameter maxShow: (query) Maximum amount within an order to be shown to other customers, &#x60;0&#x60; for invisible order (optional, default to 1)
     - parameter postOnly: (query) &lt;p&gt;If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the bid.&lt;/p&gt; &lt;p&gt;Only valid in combination with time_in_force&#x3D;&#x60;\&quot;good_til_cancelled\&quot;&#x60;&lt;/p&gt; (optional, default to true)
     - parameter reduceOnly: (query) If &#x60;true&#x60;, the order is considered reduce-only which is intended to only reduce a current position (optional, default to false)
     - parameter stopPrice: (query) Stop price, required for stop limit orders (Only for stop orders) (optional)
     - parameter trigger: (query) Defines trigger type, required for &#x60;\&quot;stop_limit\&quot;&#x60; order type (optional)
     - parameter advanced: (query) Advanced option order type. (Only for options) (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateBuyGetWithRequestBuilder(instrumentName: String, amount: Double, type: ModelType_privateBuyGet? = nil, label: String? = nil, price: Double? = nil, timeInForce: TimeInForce_privateBuyGet? = nil, maxShow: Double? = nil, postOnly: Bool? = nil, reduceOnly: Bool? = nil, stopPrice: Double? = nil, trigger: Trigger_privateBuyGet? = nil, advanced: Advanced_privateBuyGet? = nil) -> RequestBuilder<Any> {
        let path = "/private/buy"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "amount": amount, 
            "type": type?.rawValue, 
            "label": label, 
            "price": price, 
            "time_in_force": timeInForce?.rawValue, 
            "max_show": maxShow, 
            "post_only": postOnly, 
            "reduce_only": reduceOnly, 
            "stop_price": stopPrice, 
            "trigger": trigger?.rawValue, 
            "advanced": advanced?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateCancelAllByCurrencyGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter kind
     */
    public enum Kind_privateCancelAllByCurrencyGet: String {
        case future = "future"
        case option = "option"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateCancelAllByCurrencyGet: String {
        case all = "all"
        case limit = "limit"
        case stop = "stop"
    }

    /**
     Cancels all orders by currency, optionally filtered by instrument kind and/or order type.
     
     - parameter currency: (query) The currency symbol 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter type: (query) Order type - limit, stop or all, default - &#x60;all&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateCancelAllByCurrencyGet(currency: Currency_privateCancelAllByCurrencyGet, kind: Kind_privateCancelAllByCurrencyGet? = nil, type: ModelType_privateCancelAllByCurrencyGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateCancelAllByCurrencyGetWithRequestBuilder(currency: currency, kind: kind, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Cancels all orders by currency, optionally filtered by instrument kind and/or order type.
     - GET /private/cancel_all_by_currency
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter type: (query) Order type - limit, stop or all, default - &#x60;all&#x60; (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateCancelAllByCurrencyGetWithRequestBuilder(currency: Currency_privateCancelAllByCurrencyGet, kind: Kind_privateCancelAllByCurrencyGet? = nil, type: ModelType_privateCancelAllByCurrencyGet? = nil) -> RequestBuilder<Any> {
        let path = "/private/cancel_all_by_currency"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "kind": kind?.rawValue, 
            "type": type?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateCancelAllByInstrumentGet: String {
        case all = "all"
        case limit = "limit"
        case stop = "stop"
    }

    /**
     Cancels all orders by instrument, optionally filtered by order type.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter type: (query) Order type - limit, stop or all, default - &#x60;all&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateCancelAllByInstrumentGet(instrumentName: String, type: ModelType_privateCancelAllByInstrumentGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateCancelAllByInstrumentGetWithRequestBuilder(instrumentName: instrumentName, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Cancels all orders by instrument, optionally filtered by order type.
     - GET /private/cancel_all_by_instrument
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - parameter type: (query) Order type - limit, stop or all, default - &#x60;all&#x60; (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateCancelAllByInstrumentGetWithRequestBuilder(instrumentName: String, type: ModelType_privateCancelAllByInstrumentGet? = nil) -> RequestBuilder<Any> {
        let path = "/private/cancel_all_by_instrument"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "type": type?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     This method cancels all users orders and stop orders within all currencies and instrument kinds.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateCancelAllGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateCancelAllGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     This method cancels all users orders and stop orders within all currencies and instrument kinds.
     - GET /private/cancel_all
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func privateCancelAllGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/private/cancel_all"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Cancel an order, specified by order id
     
     - parameter orderId: (query) The order id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateCancelGet(orderId: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateCancelGetWithRequestBuilder(orderId: orderId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Cancel an order, specified by order id
     - GET /private/cancel
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter orderId: (query) The order id 
     - returns: RequestBuilder<Any> 
     */
    open class func privateCancelGetWithRequestBuilder(orderId: String) -> RequestBuilder<Any> {
        let path = "/private/cancel"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "order_id": orderId
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateCancelTransferByIdGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Cancel transfer
     
     - parameter currency: (query) The currency symbol 
     - parameter id: (query) Id of transfer 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateCancelTransferByIdGet(currency: Currency_privateCancelTransferByIdGet, id: Int, tfa: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateCancelTransferByIdGetWithRequestBuilder(currency: currency, id: id, tfa: tfa).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Cancel transfer
     - GET /private/cancel_transfer_by_id
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter id: (query) Id of transfer 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateCancelTransferByIdGetWithRequestBuilder(currency: Currency_privateCancelTransferByIdGet, id: Int, tfa: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/cancel_transfer_by_id"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "id": id.encodeToJSON(), 
            "tfa": tfa
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateCancelWithdrawalGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Cancels withdrawal request
     
     - parameter currency: (query) The currency symbol 
     - parameter id: (query) The withdrawal id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateCancelWithdrawalGet(currency: Currency_privateCancelWithdrawalGet, id: Double, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateCancelWithdrawalGetWithRequestBuilder(currency: currency, id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Cancels withdrawal request
     - GET /private/cancel_withdrawal
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter id: (query) The withdrawal id 
     - returns: RequestBuilder<Any> 
     */
    open class func privateCancelWithdrawalGetWithRequestBuilder(currency: Currency_privateCancelWithdrawalGet, id: Double) -> RequestBuilder<Any> {
        let path = "/private/cancel_withdrawal"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "id": id
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Change the user name for a subaccount
     
     - parameter sid: (query) The user id for the subaccount 
     - parameter name: (query) The new user name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateChangeSubaccountNameGet(sid: Int, name: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateChangeSubaccountNameGetWithRequestBuilder(sid: sid, name: name).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Change the user name for a subaccount
     - GET /private/change_subaccount_name
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter sid: (query) The user id for the subaccount 
     - parameter name: (query) The new user name 
     - returns: RequestBuilder<Any> 
     */
    open class func privateChangeSubaccountNameGetWithRequestBuilder(sid: Int, name: String) -> RequestBuilder<Any> {
        let path = "/private/change_subaccount_name"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sid": sid.encodeToJSON(), 
            "name": name
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateClosePositionGet: String {
        case limit = "limit"
        case market = "market"
    }

    /**
     Makes closing position reduce only order .
     
     - parameter instrumentName: (query) Instrument name 
     - parameter type: (query) The order type 
     - parameter price: (query) Optional price for limit order. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateClosePositionGet(instrumentName: String, type: ModelType_privateClosePositionGet, price: Double? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateClosePositionGetWithRequestBuilder(instrumentName: instrumentName, type: type, price: price).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Makes closing position reduce only order .
     - GET /private/close_position
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - parameter type: (query) The order type 
     - parameter price: (query) Optional price for limit order. (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateClosePositionGetWithRequestBuilder(instrumentName: String, type: ModelType_privateClosePositionGet, price: Double? = nil) -> RequestBuilder<Any> {
        let path = "/private/close_position"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "type": type.rawValue, 
            "price": price
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateCreateDepositAddressGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Creates deposit address in currency
     
     - parameter currency: (query) The currency symbol 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateCreateDepositAddressGet(currency: Currency_privateCreateDepositAddressGet, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateCreateDepositAddressGetWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Creates deposit address in currency
     - GET /private/create_deposit_address
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - returns: RequestBuilder<Any> 
     */
    open class func privateCreateDepositAddressGetWithRequestBuilder(currency: Currency_privateCreateDepositAddressGet) -> RequestBuilder<Any> {
        let path = "/private/create_deposit_address"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new subaccount
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateCreateSubaccountGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateCreateSubaccountGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Create a new subaccount
     - GET /private/create_subaccount
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func privateCreateSubaccountGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/private/create_subaccount"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable two factor authentication for a subaccount.
     
     - parameter sid: (query) The user id for the subaccount 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateDisableTfaForSubaccountGet(sid: Int, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateDisableTfaForSubaccountGetWithRequestBuilder(sid: sid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Disable two factor authentication for a subaccount.
     - GET /private/disable_tfa_for_subaccount
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter sid: (query) The user id for the subaccount 
     - returns: RequestBuilder<Any> 
     */
    open class func privateDisableTfaForSubaccountGetWithRequestBuilder(sid: Int) -> RequestBuilder<Any> {
        let path = "/private/disable_tfa_for_subaccount"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sid": sid.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disables TFA with one time recovery code
     
     - parameter password: (query) The password for the subaccount 
     - parameter code: (query) One time recovery code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateDisableTfaWithRecoveryCodeGet(password: String, code: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateDisableTfaWithRecoveryCodeGetWithRequestBuilder(password: password, code: code).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Disables TFA with one time recovery code
     - GET /private/disable_tfa_with_recovery_code
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter password: (query) The password for the subaccount 
     - parameter code: (query) One time recovery code 
     - returns: RequestBuilder<Any> 
     */
    open class func privateDisableTfaWithRecoveryCodeGetWithRequestBuilder(password: String, code: String) -> RequestBuilder<Any> {
        let path = "/private/disable_tfa_with_recovery_code"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "password": password, 
            "code": code
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter advanced
     */
    public enum Advanced_privateEditGet: String {
        case usd = "usd"
        case implv = "implv"
    }

    /**
     Change price, amount and/or other properties of an order.
     
     - parameter orderId: (query) The order id 
     - parameter amount: (query) It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH 
     - parameter price: (query) &lt;p&gt;The order price in base currency.&lt;/p&gt; &lt;p&gt;When editing an option order with advanced&#x3D;usd, the field price should be the option price value in USD.&lt;/p&gt; &lt;p&gt;When editing an option order with advanced&#x3D;implv, the field price should be a value of implied volatility in percentages. For example,  price&#x3D;100, means implied volatility of 100%&lt;/p&gt; 
     - parameter postOnly: (query) &lt;p&gt;If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the bid.&lt;/p&gt; &lt;p&gt;Only valid in combination with time_in_force&#x3D;&#x60;\&quot;good_til_cancelled\&quot;&#x60;&lt;/p&gt; (optional, default to true)
     - parameter advanced: (query) Advanced option order type. If you have posted an advanced option order, it is necessary to re-supply this parameter when editing it (Only for options) (optional)
     - parameter stopPrice: (query) Stop price, required for stop limit orders (Only for stop orders) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateEditGet(orderId: String, amount: Double, price: Double, postOnly: Bool? = nil, advanced: Advanced_privateEditGet? = nil, stopPrice: Double? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateEditGetWithRequestBuilder(orderId: orderId, amount: amount, price: price, postOnly: postOnly, advanced: advanced, stopPrice: stopPrice).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Change price, amount and/or other properties of an order.
     - GET /private/edit
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter orderId: (query) The order id 
     - parameter amount: (query) It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH 
     - parameter price: (query) &lt;p&gt;The order price in base currency.&lt;/p&gt; &lt;p&gt;When editing an option order with advanced&#x3D;usd, the field price should be the option price value in USD.&lt;/p&gt; &lt;p&gt;When editing an option order with advanced&#x3D;implv, the field price should be a value of implied volatility in percentages. For example,  price&#x3D;100, means implied volatility of 100%&lt;/p&gt; 
     - parameter postOnly: (query) &lt;p&gt;If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the bid.&lt;/p&gt; &lt;p&gt;Only valid in combination with time_in_force&#x3D;&#x60;\&quot;good_til_cancelled\&quot;&#x60;&lt;/p&gt; (optional, default to true)
     - parameter advanced: (query) Advanced option order type. If you have posted an advanced option order, it is necessary to re-supply this parameter when editing it (Only for options) (optional)
     - parameter stopPrice: (query) Stop price, required for stop limit orders (Only for stop orders) (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateEditGetWithRequestBuilder(orderId: String, amount: Double, price: Double, postOnly: Bool? = nil, advanced: Advanced_privateEditGet? = nil, stopPrice: Double? = nil) -> RequestBuilder<Any> {
        let path = "/private/edit"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "order_id": orderId, 
            "amount": amount, 
            "price": price, 
            "post_only": postOnly, 
            "advanced": advanced?.rawValue, 
            "stop_price": stopPrice
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetAccountSummaryGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Retrieves user account summary.
     
     - parameter currency: (query) The currency symbol 
     - parameter extended: (query) Include additional fields (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetAccountSummaryGet(currency: Currency_privateGetAccountSummaryGet, extended: Bool? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetAccountSummaryGetWithRequestBuilder(currency: currency, extended: extended).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves user account summary.
     - GET /private/get_account_summary
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter extended: (query) Include additional fields (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetAccountSummaryGetWithRequestBuilder(currency: Currency_privateGetAccountSummaryGet, extended: Bool? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_account_summary"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "extended": extended
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetAddressBookGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateGetAddressBookGet: String {
        case transfer = "transfer"
        case withdrawal = "withdrawal"
    }

    /**
     Retrieves address book of given type
     
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetAddressBookGet(currency: Currency_privateGetAddressBookGet, type: ModelType_privateGetAddressBookGet, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetAddressBookGetWithRequestBuilder(currency: currency, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves address book of given type
     - GET /private/get_address_book
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetAddressBookGetWithRequestBuilder(currency: Currency_privateGetAddressBookGet, type: ModelType_privateGetAddressBookGet) -> RequestBuilder<Any> {
        let path = "/private/get_address_book"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "type": type.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetCurrentDepositAddressGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Retrieve deposit address for currency
     
     - parameter currency: (query) The currency symbol 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetCurrentDepositAddressGet(currency: Currency_privateGetCurrentDepositAddressGet, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetCurrentDepositAddressGetWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve deposit address for currency
     - GET /private/get_current_deposit_address
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetCurrentDepositAddressGetWithRequestBuilder(currency: Currency_privateGetCurrentDepositAddressGet) -> RequestBuilder<Any> {
        let path = "/private/get_current_deposit_address"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetDepositsGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Retrieve the latest users deposits
     
     - parameter currency: (query) The currency symbol 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetDepositsGet(currency: Currency_privateGetDepositsGet, count: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetDepositsGetWithRequestBuilder(currency: currency, count: count, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the latest users deposits
     - GET /private/get_deposits
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetDepositsGetWithRequestBuilder(currency: Currency_privateGetDepositsGet, count: Int? = nil, offset: Int? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_deposits"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "count": count?.encodeToJSON(), 
            "offset": offset?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves the language to be used for emails.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetEmailLanguageGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetEmailLanguageGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves the language to be used for emails.
     - GET /private/get_email_language
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetEmailLanguageGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/private/get_email_language"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get margins for given instrument, amount and price.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter amount: (query) Amount, integer for future, float for option. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH. 
     - parameter price: (query) Price 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetMarginsGet(instrumentName: String, amount: Double, price: Double, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetMarginsGetWithRequestBuilder(instrumentName: instrumentName, amount: amount, price: price).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get margins for given instrument, amount and price.
     - GET /private/get_margins
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - parameter amount: (query) Amount, integer for future, float for option. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH. 
     - parameter price: (query) Price 
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetMarginsGetWithRequestBuilder(instrumentName: String, amount: Double, price: Double) -> RequestBuilder<Any> {
        let path = "/private/get_margins"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "amount": amount, 
            "price": price
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves announcements that have not been marked read by the user.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetNewAnnouncementsGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetNewAnnouncementsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves announcements that have not been marked read by the user.
     - GET /private/get_new_announcements
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetNewAnnouncementsGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/private/get_new_announcements"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetOpenOrdersByCurrencyGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter kind
     */
    public enum Kind_privateGetOpenOrdersByCurrencyGet: String {
        case future = "future"
        case option = "option"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateGetOpenOrdersByCurrencyGet: String {
        case all = "all"
        case limit = "limit"
        case stopAll = "stop_all"
        case stopLimit = "stop_limit"
        case stopMarket = "stop_market"
    }

    /**
     Retrieves list of user's open orders.
     
     - parameter currency: (query) The currency symbol 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter type: (query) Order type, default - &#x60;all&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetOpenOrdersByCurrencyGet(currency: Currency_privateGetOpenOrdersByCurrencyGet, kind: Kind_privateGetOpenOrdersByCurrencyGet? = nil, type: ModelType_privateGetOpenOrdersByCurrencyGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetOpenOrdersByCurrencyGetWithRequestBuilder(currency: currency, kind: kind, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves list of user's open orders.
     - GET /private/get_open_orders_by_currency
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter type: (query) Order type, default - &#x60;all&#x60; (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetOpenOrdersByCurrencyGetWithRequestBuilder(currency: Currency_privateGetOpenOrdersByCurrencyGet, kind: Kind_privateGetOpenOrdersByCurrencyGet? = nil, type: ModelType_privateGetOpenOrdersByCurrencyGet? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_open_orders_by_currency"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "kind": kind?.rawValue, 
            "type": type?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateGetOpenOrdersByInstrumentGet: String {
        case all = "all"
        case limit = "limit"
        case stopAll = "stop_all"
        case stopLimit = "stop_limit"
        case stopMarket = "stop_market"
    }

    /**
     Retrieves list of user's open orders within given Instrument.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter type: (query) Order type, default - &#x60;all&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetOpenOrdersByInstrumentGet(instrumentName: String, type: ModelType_privateGetOpenOrdersByInstrumentGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetOpenOrdersByInstrumentGetWithRequestBuilder(instrumentName: instrumentName, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves list of user's open orders within given Instrument.
     - GET /private/get_open_orders_by_instrument
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - parameter type: (query) Order type, default - &#x60;all&#x60; (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetOpenOrdersByInstrumentGetWithRequestBuilder(instrumentName: String, type: ModelType_privateGetOpenOrdersByInstrumentGet? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_open_orders_by_instrument"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "type": type?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetOrderHistoryByCurrencyGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter kind
     */
    public enum Kind_privateGetOrderHistoryByCurrencyGet: String {
        case future = "future"
        case option = "option"
    }

    /**
     Retrieves history of orders that have been partially or fully filled.
     
     - parameter currency: (query) The currency symbol 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter count: (query) Number of requested items, default - &#x60;20&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - parameter includeOld: (query) Include in result orders older than 2 days, default - &#x60;false&#x60; (optional)
     - parameter includeUnfilled: (query) Include in result fully unfilled closed orders, default - &#x60;false&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetOrderHistoryByCurrencyGet(currency: Currency_privateGetOrderHistoryByCurrencyGet, kind: Kind_privateGetOrderHistoryByCurrencyGet? = nil, count: Int? = nil, offset: Int? = nil, includeOld: Bool? = nil, includeUnfilled: Bool? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetOrderHistoryByCurrencyGetWithRequestBuilder(currency: currency, kind: kind, count: count, offset: offset, includeOld: includeOld, includeUnfilled: includeUnfilled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves history of orders that have been partially or fully filled.
     - GET /private/get_order_history_by_currency
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter count: (query) Number of requested items, default - &#x60;20&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - parameter includeOld: (query) Include in result orders older than 2 days, default - &#x60;false&#x60; (optional)
     - parameter includeUnfilled: (query) Include in result fully unfilled closed orders, default - &#x60;false&#x60; (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetOrderHistoryByCurrencyGetWithRequestBuilder(currency: Currency_privateGetOrderHistoryByCurrencyGet, kind: Kind_privateGetOrderHistoryByCurrencyGet? = nil, count: Int? = nil, offset: Int? = nil, includeOld: Bool? = nil, includeUnfilled: Bool? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_order_history_by_currency"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "kind": kind?.rawValue, 
            "count": count?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "include_old": includeOld, 
            "include_unfilled": includeUnfilled
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves history of orders that have been partially or fully filled.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter count: (query) Number of requested items, default - &#x60;20&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - parameter includeOld: (query) Include in result orders older than 2 days, default - &#x60;false&#x60; (optional)
     - parameter includeUnfilled: (query) Include in result fully unfilled closed orders, default - &#x60;false&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetOrderHistoryByInstrumentGet(instrumentName: String, count: Int? = nil, offset: Int? = nil, includeOld: Bool? = nil, includeUnfilled: Bool? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetOrderHistoryByInstrumentGetWithRequestBuilder(instrumentName: instrumentName, count: count, offset: offset, includeOld: includeOld, includeUnfilled: includeUnfilled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves history of orders that have been partially or fully filled.
     - GET /private/get_order_history_by_instrument
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - parameter count: (query) Number of requested items, default - &#x60;20&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - parameter includeOld: (query) Include in result orders older than 2 days, default - &#x60;false&#x60; (optional)
     - parameter includeUnfilled: (query) Include in result fully unfilled closed orders, default - &#x60;false&#x60; (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetOrderHistoryByInstrumentGetWithRequestBuilder(instrumentName: String, count: Int? = nil, offset: Int? = nil, includeOld: Bool? = nil, includeUnfilled: Bool? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_order_history_by_instrument"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "count": count?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "include_old": includeOld, 
            "include_unfilled": includeUnfilled
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves initial margins of given orders
     
     - parameter ids: (query) Ids of orders 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetOrderMarginByIdsGet(ids: [String], completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetOrderMarginByIdsGetWithRequestBuilder(ids: ids).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves initial margins of given orders
     - GET /private/get_order_margin_by_ids
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter ids: (query) Ids of orders 
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetOrderMarginByIdsGetWithRequestBuilder(ids: [String]) -> RequestBuilder<Any> {
        let path = "/private/get_order_margin_by_ids"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ids": ids
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve the current state of an order.
     
     - parameter orderId: (query) The order id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetOrderStateGet(orderId: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetOrderStateGetWithRequestBuilder(orderId: orderId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the current state of an order.
     - GET /private/get_order_state
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter orderId: (query) The order id 
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetOrderStateGetWithRequestBuilder(orderId: String) -> RequestBuilder<Any> {
        let path = "/private/get_order_state"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "order_id": orderId
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve user position.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetPositionGet(instrumentName: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetPositionGetWithRequestBuilder(instrumentName: instrumentName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve user position.
     - GET /private/get_position
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetPositionGetWithRequestBuilder(instrumentName: String) -> RequestBuilder<Any> {
        let path = "/private/get_position"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetPositionsGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter kind
     */
    public enum Kind_privateGetPositionsGet: String {
        case future = "future"
        case option = "option"
    }

    /**
     Retrieve user positions.
     
     - parameter currency: (query)  
     - parameter kind: (query) Kind filter on positions (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetPositionsGet(currency: Currency_privateGetPositionsGet, kind: Kind_privateGetPositionsGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetPositionsGetWithRequestBuilder(currency: currency, kind: kind).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve user positions.
     - GET /private/get_positions
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query)  
     - parameter kind: (query) Kind filter on positions (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetPositionsGetWithRequestBuilder(currency: Currency_privateGetPositionsGet, kind: Kind_privateGetPositionsGet? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_positions"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "kind": kind?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetSettlementHistoryByCurrencyGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateGetSettlementHistoryByCurrencyGet: String {
        case settlement = "settlement"
        case delivery = "delivery"
        case bankruptcy = "bankruptcy"
    }

    /**
     Retrieves settlement, delivery and bankruptcy events that have affected your account.
     
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Settlement type (optional)
     - parameter count: (query) Number of requested items, default - &#x60;20&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetSettlementHistoryByCurrencyGet(currency: Currency_privateGetSettlementHistoryByCurrencyGet, type: ModelType_privateGetSettlementHistoryByCurrencyGet? = nil, count: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetSettlementHistoryByCurrencyGetWithRequestBuilder(currency: currency, type: type, count: count).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves settlement, delivery and bankruptcy events that have affected your account.
     - GET /private/get_settlement_history_by_currency
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Settlement type (optional)
     - parameter count: (query) Number of requested items, default - &#x60;20&#x60; (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetSettlementHistoryByCurrencyGetWithRequestBuilder(currency: Currency_privateGetSettlementHistoryByCurrencyGet, type: ModelType_privateGetSettlementHistoryByCurrencyGet? = nil, count: Int? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_settlement_history_by_currency"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "type": type?.rawValue, 
            "count": count?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateGetSettlementHistoryByInstrumentGet: String {
        case settlement = "settlement"
        case delivery = "delivery"
        case bankruptcy = "bankruptcy"
    }

    /**
     Retrieves public settlement, delivery and bankruptcy events filtered by instrument name
     
     - parameter instrumentName: (query) Instrument name 
     - parameter type: (query) Settlement type (optional)
     - parameter count: (query) Number of requested items, default - &#x60;20&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetSettlementHistoryByInstrumentGet(instrumentName: String, type: ModelType_privateGetSettlementHistoryByInstrumentGet? = nil, count: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetSettlementHistoryByInstrumentGetWithRequestBuilder(instrumentName: instrumentName, type: type, count: count).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves public settlement, delivery and bankruptcy events filtered by instrument name
     - GET /private/get_settlement_history_by_instrument
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - parameter type: (query) Settlement type (optional)
     - parameter count: (query) Number of requested items, default - &#x60;20&#x60; (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetSettlementHistoryByInstrumentGetWithRequestBuilder(instrumentName: String, type: ModelType_privateGetSettlementHistoryByInstrumentGet? = nil, count: Int? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_settlement_history_by_instrument"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "type": type?.rawValue, 
            "count": count?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get information about subaccounts
     
     - parameter withPortfolio: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetSubaccountsGet(withPortfolio: Bool? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetSubaccountsGetWithRequestBuilder(withPortfolio: withPortfolio).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get information about subaccounts
     - GET /private/get_subaccounts
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter withPortfolio: (query)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetSubaccountsGetWithRequestBuilder(withPortfolio: Bool? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_subaccounts"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "with_portfolio": withPortfolio
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetTransfersGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Adds new entry to address book of given type
     
     - parameter currency: (query) The currency symbol 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetTransfersGet(currency: Currency_privateGetTransfersGet, count: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetTransfersGetWithRequestBuilder(currency: currency, count: count, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Adds new entry to address book of given type
     - GET /private/get_transfers
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetTransfersGetWithRequestBuilder(currency: Currency_privateGetTransfersGet, count: Int? = nil, offset: Int? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_transfers"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "count": count?.encodeToJSON(), 
            "offset": offset?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetUserTradesByCurrencyAndTimeGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter kind
     */
    public enum Kind_privateGetUserTradesByCurrencyAndTimeGet: String {
        case future = "future"
        case option = "option"
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_privateGetUserTradesByCurrencyAndTimeGet: String {
        case asc = "asc"
        case desc = "desc"
        case _default = "default"
    }

    /**
     Retrieve the latest user trades that have occurred for instruments in a specific currency symbol and within given time range.
     
     - parameter currency: (query) The currency symbol 
     - parameter startTimestamp: (query) The earliest timestamp to return result for 
     - parameter endTimestamp: (query) The most recent timestamp to return result for 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetUserTradesByCurrencyAndTimeGet(currency: Currency_privateGetUserTradesByCurrencyAndTimeGet, startTimestamp: Int, endTimestamp: Int, kind: Kind_privateGetUserTradesByCurrencyAndTimeGet? = nil, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_privateGetUserTradesByCurrencyAndTimeGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetUserTradesByCurrencyAndTimeGetWithRequestBuilder(currency: currency, startTimestamp: startTimestamp, endTimestamp: endTimestamp, kind: kind, count: count, includeOld: includeOld, sorting: sorting).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the latest user trades that have occurred for instruments in a specific currency symbol and within given time range.
     - GET /private/get_user_trades_by_currency_and_time
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter startTimestamp: (query) The earliest timestamp to return result for 
     - parameter endTimestamp: (query) The most recent timestamp to return result for 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetUserTradesByCurrencyAndTimeGetWithRequestBuilder(currency: Currency_privateGetUserTradesByCurrencyAndTimeGet, startTimestamp: Int, endTimestamp: Int, kind: Kind_privateGetUserTradesByCurrencyAndTimeGet? = nil, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_privateGetUserTradesByCurrencyAndTimeGet? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_user_trades_by_currency_and_time"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "kind": kind?.rawValue, 
            "start_timestamp": startTimestamp.encodeToJSON(), 
            "end_timestamp": endTimestamp.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "include_old": includeOld, 
            "sorting": sorting?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetUserTradesByCurrencyGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter kind
     */
    public enum Kind_privateGetUserTradesByCurrencyGet: String {
        case future = "future"
        case option = "option"
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_privateGetUserTradesByCurrencyGet: String {
        case asc = "asc"
        case desc = "desc"
        case _default = "default"
    }

    /**
     Retrieve the latest user trades that have occurred for instruments in a specific currency symbol.
     
     - parameter currency: (query) The currency symbol 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter startId: (query) The ID number of the first trade to be returned (optional)
     - parameter endId: (query) The ID number of the last trade to be returned (optional)
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetUserTradesByCurrencyGet(currency: Currency_privateGetUserTradesByCurrencyGet, kind: Kind_privateGetUserTradesByCurrencyGet? = nil, startId: String? = nil, endId: String? = nil, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_privateGetUserTradesByCurrencyGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetUserTradesByCurrencyGetWithRequestBuilder(currency: currency, kind: kind, startId: startId, endId: endId, count: count, includeOld: includeOld, sorting: sorting).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the latest user trades that have occurred for instruments in a specific currency symbol.
     - GET /private/get_user_trades_by_currency
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter startId: (query) The ID number of the first trade to be returned (optional)
     - parameter endId: (query) The ID number of the last trade to be returned (optional)
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetUserTradesByCurrencyGetWithRequestBuilder(currency: Currency_privateGetUserTradesByCurrencyGet, kind: Kind_privateGetUserTradesByCurrencyGet? = nil, startId: String? = nil, endId: String? = nil, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_privateGetUserTradesByCurrencyGet? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_user_trades_by_currency"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "kind": kind?.rawValue, 
            "start_id": startId, 
            "end_id": endId, 
            "count": count?.encodeToJSON(), 
            "include_old": includeOld, 
            "sorting": sorting?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_privateGetUserTradesByInstrumentAndTimeGet: String {
        case asc = "asc"
        case desc = "desc"
        case _default = "default"
    }

    /**
     Retrieve the latest user trades that have occurred for a specific instrument and within given time range.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter startTimestamp: (query) The earliest timestamp to return result for 
     - parameter endTimestamp: (query) The most recent timestamp to return result for 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetUserTradesByInstrumentAndTimeGet(instrumentName: String, startTimestamp: Int, endTimestamp: Int, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_privateGetUserTradesByInstrumentAndTimeGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetUserTradesByInstrumentAndTimeGetWithRequestBuilder(instrumentName: instrumentName, startTimestamp: startTimestamp, endTimestamp: endTimestamp, count: count, includeOld: includeOld, sorting: sorting).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the latest user trades that have occurred for a specific instrument and within given time range.
     - GET /private/get_user_trades_by_instrument_and_time
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - parameter startTimestamp: (query) The earliest timestamp to return result for 
     - parameter endTimestamp: (query) The most recent timestamp to return result for 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetUserTradesByInstrumentAndTimeGetWithRequestBuilder(instrumentName: String, startTimestamp: Int, endTimestamp: Int, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_privateGetUserTradesByInstrumentAndTimeGet? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_user_trades_by_instrument_and_time"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "start_timestamp": startTimestamp.encodeToJSON(), 
            "end_timestamp": endTimestamp.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "include_old": includeOld, 
            "sorting": sorting?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_privateGetUserTradesByInstrumentGet: String {
        case asc = "asc"
        case desc = "desc"
        case _default = "default"
    }

    /**
     Retrieve the latest user trades that have occurred for a specific instrument.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter startSeq: (query) The sequence number of the first trade to be returned (optional)
     - parameter endSeq: (query) The sequence number of the last trade to be returned (optional)
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetUserTradesByInstrumentGet(instrumentName: String, startSeq: Int? = nil, endSeq: Int? = nil, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_privateGetUserTradesByInstrumentGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetUserTradesByInstrumentGetWithRequestBuilder(instrumentName: instrumentName, startSeq: startSeq, endSeq: endSeq, count: count, includeOld: includeOld, sorting: sorting).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the latest user trades that have occurred for a specific instrument.
     - GET /private/get_user_trades_by_instrument
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - parameter startSeq: (query) The sequence number of the first trade to be returned (optional)
     - parameter endSeq: (query) The sequence number of the last trade to be returned (optional)
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetUserTradesByInstrumentGetWithRequestBuilder(instrumentName: String, startSeq: Int? = nil, endSeq: Int? = nil, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_privateGetUserTradesByInstrumentGet? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_user_trades_by_instrument"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "start_seq": startSeq?.encodeToJSON(), 
            "end_seq": endSeq?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "include_old": includeOld, 
            "sorting": sorting?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_privateGetUserTradesByOrderGet: String {
        case asc = "asc"
        case desc = "desc"
        case _default = "default"
    }

    /**
     Retrieve the list of user trades that was created for given order
     
     - parameter orderId: (query) The order id 
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetUserTradesByOrderGet(orderId: String, sorting: Sorting_privateGetUserTradesByOrderGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetUserTradesByOrderGetWithRequestBuilder(orderId: orderId, sorting: sorting).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the list of user trades that was created for given order
     - GET /private/get_user_trades_by_order
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter orderId: (query) The order id 
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetUserTradesByOrderGetWithRequestBuilder(orderId: String, sorting: Sorting_privateGetUserTradesByOrderGet? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_user_trades_by_order"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "order_id": orderId, 
            "sorting": sorting?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetWithdrawalsGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Retrieve the latest users withdrawals
     
     - parameter currency: (query) The currency symbol 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetWithdrawalsGet(currency: Currency_privateGetWithdrawalsGet, count: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetWithdrawalsGetWithRequestBuilder(currency: currency, count: count, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the latest users withdrawals
     - GET /private/get_withdrawals
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter offset: (query) The offset for pagination, default - &#x60;0&#x60; (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetWithdrawalsGetWithRequestBuilder(currency: Currency_privateGetWithdrawalsGet, count: Int? = nil, offset: Int? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_withdrawals"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "count": count?.encodeToJSON(), 
            "offset": offset?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateRemoveFromAddressBookGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateRemoveFromAddressBookGet: String {
        case transfer = "transfer"
        case withdrawal = "withdrawal"
    }

    /**
     Adds new entry to address book of given type
     
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateRemoveFromAddressBookGet(currency: Currency_privateRemoveFromAddressBookGet, type: ModelType_privateRemoveFromAddressBookGet, address: String, tfa: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateRemoveFromAddressBookGetWithRequestBuilder(currency: currency, type: type, address: address, tfa: tfa).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Adds new entry to address book of given type
     - GET /private/remove_from_address_book
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateRemoveFromAddressBookGetWithRequestBuilder(currency: Currency_privateRemoveFromAddressBookGet, type: ModelType_privateRemoveFromAddressBookGet, address: String, tfa: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/remove_from_address_book"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "type": type.rawValue, 
            "address": address, 
            "tfa": tfa
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateSellGet: String {
        case limit = "limit"
        case stopLimit = "stop_limit"
        case market = "market"
        case stopMarket = "stop_market"
    }

    /**
     * enum for parameter timeInForce
     */
    public enum TimeInForce_privateSellGet: String {
        case goodTilCancelled = "good_til_cancelled"
        case fillOrKill = "fill_or_kill"
        case immediateOrCancel = "immediate_or_cancel"
    }

    /**
     * enum for parameter trigger
     */
    public enum Trigger_privateSellGet: String {
        case indexPrice = "index_price"
        case markPrice = "mark_price"
        case lastPrice = "last_price"
    }

    /**
     * enum for parameter advanced
     */
    public enum Advanced_privateSellGet: String {
        case usd = "usd"
        case implv = "implv"
    }

    /**
     Places a sell order for an instrument.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter amount: (query) It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH 
     - parameter type: (query) The order type, default: &#x60;\&quot;limit\&quot;&#x60; (optional)
     - parameter label: (query) user defined label for the order (maximum 32 characters) (optional)
     - parameter price: (query) &lt;p&gt;The order price in base currency (Only for limit and stop_limit orders)&lt;/p&gt; &lt;p&gt;When adding order with advanced&#x3D;usd, the field price should be the option price value in USD.&lt;/p&gt; &lt;p&gt;When adding order with advanced&#x3D;implv, the field price should be a value of implied volatility in percentages. For example,  price&#x3D;100, means implied volatility of 100%&lt;/p&gt; (optional)
     - parameter timeInForce: (query) &lt;p&gt;Specifies how long the order remains in effect. Default &#x60;\&quot;good_til_cancelled\&quot;&#x60;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&#x60;\&quot;good_til_cancelled\&quot;&#x60; - unfilled order remains in order book until cancelled&lt;/li&gt; &lt;li&gt;&#x60;\&quot;fill_or_kill\&quot;&#x60; - execute a transaction immediately and completely or not at all&lt;/li&gt; &lt;li&gt;&#x60;\&quot;immediate_or_cancel\&quot;&#x60; - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled&lt;/li&gt; &lt;/ul&gt; (optional, default to .good_til_cancelled)
     - parameter maxShow: (query) Maximum amount within an order to be shown to other customers, &#x60;0&#x60; for invisible order (optional, default to 1)
     - parameter postOnly: (query) &lt;p&gt;If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the bid.&lt;/p&gt; &lt;p&gt;Only valid in combination with time_in_force&#x3D;&#x60;\&quot;good_til_cancelled\&quot;&#x60;&lt;/p&gt; (optional, default to true)
     - parameter reduceOnly: (query) If &#x60;true&#x60;, the order is considered reduce-only which is intended to only reduce a current position (optional, default to false)
     - parameter stopPrice: (query) Stop price, required for stop limit orders (Only for stop orders) (optional)
     - parameter trigger: (query) Defines trigger type, required for &#x60;\&quot;stop_limit\&quot;&#x60; order type (optional)
     - parameter advanced: (query) Advanced option order type. (Only for options) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSellGet(instrumentName: String, amount: Double, type: ModelType_privateSellGet? = nil, label: String? = nil, price: Double? = nil, timeInForce: TimeInForce_privateSellGet? = nil, maxShow: Double? = nil, postOnly: Bool? = nil, reduceOnly: Bool? = nil, stopPrice: Double? = nil, trigger: Trigger_privateSellGet? = nil, advanced: Advanced_privateSellGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSellGetWithRequestBuilder(instrumentName: instrumentName, amount: amount, type: type, label: label, price: price, timeInForce: timeInForce, maxShow: maxShow, postOnly: postOnly, reduceOnly: reduceOnly, stopPrice: stopPrice, trigger: trigger, advanced: advanced).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Places a sell order for an instrument.
     - GET /private/sell
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - parameter amount: (query) It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH 
     - parameter type: (query) The order type, default: &#x60;\&quot;limit\&quot;&#x60; (optional)
     - parameter label: (query) user defined label for the order (maximum 32 characters) (optional)
     - parameter price: (query) &lt;p&gt;The order price in base currency (Only for limit and stop_limit orders)&lt;/p&gt; &lt;p&gt;When adding order with advanced&#x3D;usd, the field price should be the option price value in USD.&lt;/p&gt; &lt;p&gt;When adding order with advanced&#x3D;implv, the field price should be a value of implied volatility in percentages. For example,  price&#x3D;100, means implied volatility of 100%&lt;/p&gt; (optional)
     - parameter timeInForce: (query) &lt;p&gt;Specifies how long the order remains in effect. Default &#x60;\&quot;good_til_cancelled\&quot;&#x60;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&#x60;\&quot;good_til_cancelled\&quot;&#x60; - unfilled order remains in order book until cancelled&lt;/li&gt; &lt;li&gt;&#x60;\&quot;fill_or_kill\&quot;&#x60; - execute a transaction immediately and completely or not at all&lt;/li&gt; &lt;li&gt;&#x60;\&quot;immediate_or_cancel\&quot;&#x60; - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled&lt;/li&gt; &lt;/ul&gt; (optional, default to .good_til_cancelled)
     - parameter maxShow: (query) Maximum amount within an order to be shown to other customers, &#x60;0&#x60; for invisible order (optional, default to 1)
     - parameter postOnly: (query) &lt;p&gt;If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the bid.&lt;/p&gt; &lt;p&gt;Only valid in combination with time_in_force&#x3D;&#x60;\&quot;good_til_cancelled\&quot;&#x60;&lt;/p&gt; (optional, default to true)
     - parameter reduceOnly: (query) If &#x60;true&#x60;, the order is considered reduce-only which is intended to only reduce a current position (optional, default to false)
     - parameter stopPrice: (query) Stop price, required for stop limit orders (Only for stop orders) (optional)
     - parameter trigger: (query) Defines trigger type, required for &#x60;\&quot;stop_limit\&quot;&#x60; order type (optional)
     - parameter advanced: (query) Advanced option order type. (Only for options) (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateSellGetWithRequestBuilder(instrumentName: String, amount: Double, type: ModelType_privateSellGet? = nil, label: String? = nil, price: Double? = nil, timeInForce: TimeInForce_privateSellGet? = nil, maxShow: Double? = nil, postOnly: Bool? = nil, reduceOnly: Bool? = nil, stopPrice: Double? = nil, trigger: Trigger_privateSellGet? = nil, advanced: Advanced_privateSellGet? = nil) -> RequestBuilder<Any> {
        let path = "/private/sell"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "amount": amount, 
            "type": type?.rawValue, 
            "label": label, 
            "price": price, 
            "time_in_force": timeInForce?.rawValue, 
            "max_show": maxShow, 
            "post_only": postOnly, 
            "reduce_only": reduceOnly, 
            "stop_price": stopPrice, 
            "trigger": trigger?.rawValue, 
            "advanced": advanced?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Marks an announcement as read, so it will not be shown in `get_new_announcements`.
     
     - parameter announcementId: (query) the ID of the announcement 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSetAnnouncementAsReadGet(announcementId: Double, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSetAnnouncementAsReadGetWithRequestBuilder(announcementId: announcementId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Marks an announcement as read, so it will not be shown in `get_new_announcements`.
     - GET /private/set_announcement_as_read
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter announcementId: (query) the ID of the announcement 
     - returns: RequestBuilder<Any> 
     */
    open class func privateSetAnnouncementAsReadGetWithRequestBuilder(announcementId: Double) -> RequestBuilder<Any> {
        let path = "/private/set_announcement_as_read"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "announcement_id": announcementId
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Assign an email address to a subaccount. User will receive an email with confirmation link.
     
     - parameter sid: (query) The user id for the subaccount 
     - parameter email: (query) The email address for the subaccount 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSetEmailForSubaccountGet(sid: Int, email: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSetEmailForSubaccountGetWithRequestBuilder(sid: sid, email: email).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Assign an email address to a subaccount. User will receive an email with confirmation link.
     - GET /private/set_email_for_subaccount
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter sid: (query) The user id for the subaccount 
     - parameter email: (query) The email address for the subaccount 
     - returns: RequestBuilder<Any> 
     */
    open class func privateSetEmailForSubaccountGetWithRequestBuilder(sid: Int, email: String) -> RequestBuilder<Any> {
        let path = "/private/set_email_for_subaccount"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sid": sid.encodeToJSON(), 
            "email": email
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Changes the language to be used for emails.
     
     - parameter language: (query) The abbreviated language name. Valid values include &#x60;\&quot;en\&quot;&#x60;, &#x60;\&quot;ko\&quot;&#x60;, &#x60;\&quot;zh\&quot;&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSetEmailLanguageGet(language: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSetEmailLanguageGetWithRequestBuilder(language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Changes the language to be used for emails.
     - GET /private/set_email_language
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter language: (query) The abbreviated language name. Valid values include &#x60;\&quot;en\&quot;&#x60;, &#x60;\&quot;ko\&quot;&#x60;, &#x60;\&quot;zh\&quot;&#x60; 
     - returns: RequestBuilder<Any> 
     */
    open class func privateSetEmailLanguageGetWithRequestBuilder(language: String) -> RequestBuilder<Any> {
        let path = "/private/set_email_language"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "language": language
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set the password for the subaccount
     
     - parameter sid: (query) The user id for the subaccount 
     - parameter password: (query) The password for the subaccount 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSetPasswordForSubaccountGet(sid: Int, password: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSetPasswordForSubaccountGetWithRequestBuilder(sid: sid, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Set the password for the subaccount
     - GET /private/set_password_for_subaccount
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter sid: (query) The user id for the subaccount 
     - parameter password: (query) The password for the subaccount 
     - returns: RequestBuilder<Any> 
     */
    open class func privateSetPasswordForSubaccountGetWithRequestBuilder(sid: Int, password: String) -> RequestBuilder<Any> {
        let path = "/private/set_password_for_subaccount"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sid": sid.encodeToJSON(), 
            "password": password
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateSubmitTransferToSubaccountGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Transfer funds to a subaccount.
     
     - parameter currency: (query) The currency symbol 
     - parameter amount: (query) Amount of funds to be transferred 
     - parameter destination: (query) Id of destination subaccount 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSubmitTransferToSubaccountGet(currency: Currency_privateSubmitTransferToSubaccountGet, amount: Double, destination: Int, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSubmitTransferToSubaccountGetWithRequestBuilder(currency: currency, amount: amount, destination: destination).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Transfer funds to a subaccount.
     - GET /private/submit_transfer_to_subaccount
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter amount: (query) Amount of funds to be transferred 
     - parameter destination: (query) Id of destination subaccount 
     - returns: RequestBuilder<Any> 
     */
    open class func privateSubmitTransferToSubaccountGetWithRequestBuilder(currency: Currency_privateSubmitTransferToSubaccountGet, amount: Double, destination: Int) -> RequestBuilder<Any> {
        let path = "/private/submit_transfer_to_subaccount"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "amount": amount, 
            "destination": destination.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateSubmitTransferToUserGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Transfer funds to a another user.
     
     - parameter currency: (query) The currency symbol 
     - parameter amount: (query) Amount of funds to be transferred 
     - parameter destination: (query) Destination address from address book 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSubmitTransferToUserGet(currency: Currency_privateSubmitTransferToUserGet, amount: Double, destination: String, tfa: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSubmitTransferToUserGetWithRequestBuilder(currency: currency, amount: amount, destination: destination, tfa: tfa).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Transfer funds to a another user.
     - GET /private/submit_transfer_to_user
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter amount: (query) Amount of funds to be transferred 
     - parameter destination: (query) Destination address from address book 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateSubmitTransferToUserGetWithRequestBuilder(currency: Currency_privateSubmitTransferToUserGet, amount: Double, destination: String, tfa: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/submit_transfer_to_user"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "amount": amount, 
            "destination": destination, 
            "tfa": tfa
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateToggleDepositAddressCreationGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Enable or disable deposit address creation
     
     - parameter currency: (query) The currency symbol 
     - parameter state: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateToggleDepositAddressCreationGet(currency: Currency_privateToggleDepositAddressCreationGet, state: Bool, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateToggleDepositAddressCreationGetWithRequestBuilder(currency: currency, state: state).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Enable or disable deposit address creation
     - GET /private/toggle_deposit_address_creation
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter state: (query)  
     - returns: RequestBuilder<Any> 
     */
    open class func privateToggleDepositAddressCreationGetWithRequestBuilder(currency: Currency_privateToggleDepositAddressCreationGet, state: Bool) -> RequestBuilder<Any> {
        let path = "/private/toggle_deposit_address_creation"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "state": state
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable or disable sending of notifications for the subaccount.
     
     - parameter sid: (query) The user id for the subaccount 
     - parameter state: (query) enable (&#x60;true&#x60;) or disable (&#x60;false&#x60;) notifications 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateToggleNotificationsFromSubaccountGet(sid: Int, state: Bool, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateToggleNotificationsFromSubaccountGetWithRequestBuilder(sid: sid, state: state).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Enable or disable sending of notifications for the subaccount.
     - GET /private/toggle_notifications_from_subaccount
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter sid: (query) The user id for the subaccount 
     - parameter state: (query) enable (&#x60;true&#x60;) or disable (&#x60;false&#x60;) notifications 
     - returns: RequestBuilder<Any> 
     */
    open class func privateToggleNotificationsFromSubaccountGetWithRequestBuilder(sid: Int, state: Bool) -> RequestBuilder<Any> {
        let path = "/private/toggle_notifications_from_subaccount"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sid": sid.encodeToJSON(), 
            "state": state
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter state
     */
    public enum State_privateToggleSubaccountLoginGet: String {
        case enable = "enable"
        case disable = "disable"
    }

    /**
     Enable or disable login for a subaccount. If login is disabled and a session for the subaccount exists, this session will be terminated.
     
     - parameter sid: (query) The user id for the subaccount 
     - parameter state: (query) enable or disable login. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateToggleSubaccountLoginGet(sid: Int, state: State_privateToggleSubaccountLoginGet, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateToggleSubaccountLoginGetWithRequestBuilder(sid: sid, state: state).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Enable or disable login for a subaccount. If login is disabled and a session for the subaccount exists, this session will be terminated.
     - GET /private/toggle_subaccount_login
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter sid: (query) The user id for the subaccount 
     - parameter state: (query) enable or disable login. 
     - returns: RequestBuilder<Any> 
     */
    open class func privateToggleSubaccountLoginGetWithRequestBuilder(sid: Int, state: State_privateToggleSubaccountLoginGet) -> RequestBuilder<Any> {
        let path = "/private/toggle_subaccount_login"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sid": sid.encodeToJSON(), 
            "state": state.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateWithdrawGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter priority
     */
    public enum Priority_privateWithdrawGet: String {
        case insane = "insane"
        case extremeHigh = "extreme_high"
        case veryHigh = "very_high"
        case high = "high"
        case mid = "mid"
        case low = "low"
        case veryLow = "very_low"
    }

    /**
     Creates a new withdrawal request
     
     - parameter currency: (query) The currency symbol 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter amount: (query) Amount of funds to be withdrawn 
     - parameter priority: (query) Withdrawal priority, optional for BTC, default: &#x60;high&#x60; (optional)
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateWithdrawGet(currency: Currency_privateWithdrawGet, address: String, amount: Double, priority: Priority_privateWithdrawGet? = nil, tfa: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateWithdrawGetWithRequestBuilder(currency: currency, address: address, amount: amount, priority: priority, tfa: tfa).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Creates a new withdrawal request
     - GET /private/withdraw
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter amount: (query) Amount of funds to be withdrawn 
     - parameter priority: (query) Withdrawal priority, optional for BTC, default: &#x60;high&#x60; (optional)
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateWithdrawGetWithRequestBuilder(currency: Currency_privateWithdrawGet, address: String, amount: Double, priority: Priority_privateWithdrawGet? = nil, tfa: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/withdraw"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "address": address, 
            "amount": amount, 
            "priority": priority?.rawValue, 
            "tfa": tfa
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
