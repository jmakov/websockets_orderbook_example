//
// PublicAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class PublicAPI {
    /**
     * enum for parameter grantType
     */
    public enum GrantType_publicAuthGet: String {
        case password = "password"
        case clientCredentials = "client_credentials"
        case clientSignature = "client_signature"
        case refreshToken = "refresh_token"
    }

    /**
     Authenticate
     
     - parameter grantType: (query) Method of authentication 
     - parameter username: (query) Required for grant type &#x60;password&#x60; 
     - parameter password: (query) Required for grant type &#x60;password&#x60; 
     - parameter clientId: (query) Required for grant type &#x60;client_credentials&#x60; and &#x60;client_signature&#x60; 
     - parameter clientSecret: (query) Required for grant type &#x60;client_credentials&#x60; 
     - parameter refreshToken: (query) Required for grant type &#x60;refresh_token&#x60; 
     - parameter timestamp: (query) Required for grant type &#x60;client_signature&#x60;, provides time when request has been generated 
     - parameter signature: (query) Required for grant type &#x60;client_signature&#x60;; it&#39;s a cryptographic signature calculated over provided fields using user **secret key**. The signature should be calculated as an HMAC (Hash-based Message Authentication Code) with &#x60;SHA256&#x60; hash algorithm 
     - parameter nonce: (query) Optional for grant type &#x60;client_signature&#x60;; delivers user generated initialization vector for the server token (optional)
     - parameter state: (query) Will be passed back in the response (optional)
     - parameter scope: (query) Describes type of the access for assigned token, possible values: &#x60;connection&#x60;, &#x60;session&#x60;, &#x60;session:name&#x60;, &#x60;trade:[read, read_write, none]&#x60;, &#x60;wallet:[read, read_write, none]&#x60;, &#x60;account:[read, read_write, none]&#x60;, &#x60;expires:NUMBER&#x60; (token will expire after &#x60;NUMBER&#x60; of seconds).&lt;/BR&gt;&lt;/BR&gt; **NOTICE:** Depending on choosing an authentication method (&#x60;&#x60;&#x60;grant type&#x60;&#x60;&#x60;) some scopes could be narrowed by the server. e.g. when &#x60;&#x60;&#x60;grant_type &#x3D; client_credentials&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;scope &#x3D; wallet:read_write&#x60;&#x60;&#x60; it&#39;s modified by the server as &#x60;&#x60;&#x60;scope &#x3D; wallet:read&#x60;&#x60;&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicAuthGet(grantType: GrantType_publicAuthGet, username: String, password: String, clientId: String, clientSecret: String, refreshToken: String, timestamp: String, signature: String, nonce: String? = nil, state: String? = nil, scope: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicAuthGetWithRequestBuilder(grantType: grantType, username: username, password: password, clientId: clientId, clientSecret: clientSecret, refreshToken: refreshToken, timestamp: timestamp, signature: signature, nonce: nonce, state: state, scope: scope).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Authenticate
     - GET /public/auth
     - Retrieve an Oauth access token, to be used for authentication of 'private' requests.  Three methods of authentication are supported:  - <code>password</code> - using email and and password as when logging on to the website - <code>client_credentials</code> - using the access key and access secret that can be found on the API page on the website - <code>client_signature</code> - using the access key that can be found on the API page on the website and user generated signature. The signature is calculated using some fields provided in the request, using formula described here [Deribit signature credentials](#additional-authorization-method-deribit-signature-credentials) - <code>refresh_token</code> - using a refresh token that was received from an earlier invocation  The response will contain an access token, expiration period (number of seconds that the token is valid) and a refresh token that can be used to get a new set of tokens. 
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter grantType: (query) Method of authentication 
     - parameter username: (query) Required for grant type &#x60;password&#x60; 
     - parameter password: (query) Required for grant type &#x60;password&#x60; 
     - parameter clientId: (query) Required for grant type &#x60;client_credentials&#x60; and &#x60;client_signature&#x60; 
     - parameter clientSecret: (query) Required for grant type &#x60;client_credentials&#x60; 
     - parameter refreshToken: (query) Required for grant type &#x60;refresh_token&#x60; 
     - parameter timestamp: (query) Required for grant type &#x60;client_signature&#x60;, provides time when request has been generated 
     - parameter signature: (query) Required for grant type &#x60;client_signature&#x60;; it&#39;s a cryptographic signature calculated over provided fields using user **secret key**. The signature should be calculated as an HMAC (Hash-based Message Authentication Code) with &#x60;SHA256&#x60; hash algorithm 
     - parameter nonce: (query) Optional for grant type &#x60;client_signature&#x60;; delivers user generated initialization vector for the server token (optional)
     - parameter state: (query) Will be passed back in the response (optional)
     - parameter scope: (query) Describes type of the access for assigned token, possible values: &#x60;connection&#x60;, &#x60;session&#x60;, &#x60;session:name&#x60;, &#x60;trade:[read, read_write, none]&#x60;, &#x60;wallet:[read, read_write, none]&#x60;, &#x60;account:[read, read_write, none]&#x60;, &#x60;expires:NUMBER&#x60; (token will expire after &#x60;NUMBER&#x60; of seconds).&lt;/BR&gt;&lt;/BR&gt; **NOTICE:** Depending on choosing an authentication method (&#x60;&#x60;&#x60;grant type&#x60;&#x60;&#x60;) some scopes could be narrowed by the server. e.g. when &#x60;&#x60;&#x60;grant_type &#x3D; client_credentials&#x60;&#x60;&#x60; and &#x60;&#x60;&#x60;scope &#x3D; wallet:read_write&#x60;&#x60;&#x60; it&#39;s modified by the server as &#x60;&#x60;&#x60;scope &#x3D; wallet:read&#x60;&#x60;&#x60; (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func publicAuthGetWithRequestBuilder(grantType: GrantType_publicAuthGet, username: String, password: String, clientId: String, clientSecret: String, refreshToken: String, timestamp: String, signature: String, nonce: String? = nil, state: String? = nil, scope: String? = nil) -> RequestBuilder<Any> {
        let path = "/public/auth"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "grant_type": grantType.rawValue, 
            "username": username, 
            "password": password, 
            "client_id": clientId, 
            "client_secret": clientSecret, 
            "refresh_token": refreshToken, 
            "timestamp": timestamp, 
            "signature": signature, 
            "nonce": nonce, 
            "state": state, 
            "scope": scope
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves announcements from the last 30 days.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetAnnouncementsGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetAnnouncementsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves announcements from the last 30 days.
     - GET /public/get_announcements
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetAnnouncementsGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/public/get_announcements"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_publicGetBookSummaryByCurrencyGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter kind
     */
    public enum Kind_publicGetBookSummaryByCurrencyGet: String {
        case future = "future"
        case option = "option"
    }

    /**
     Retrieves the summary information such as open interest, 24h volume, etc. for all instruments for the currency (optionally filtered by kind).
     
     - parameter currency: (query) The currency symbol 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetBookSummaryByCurrencyGet(currency: Currency_publicGetBookSummaryByCurrencyGet, kind: Kind_publicGetBookSummaryByCurrencyGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetBookSummaryByCurrencyGetWithRequestBuilder(currency: currency, kind: kind).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves the summary information such as open interest, 24h volume, etc. for all instruments for the currency (optionally filtered by kind).
     - GET /public/get_book_summary_by_currency
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetBookSummaryByCurrencyGetWithRequestBuilder(currency: Currency_publicGetBookSummaryByCurrencyGet, kind: Kind_publicGetBookSummaryByCurrencyGet? = nil) -> RequestBuilder<Any> {
        let path = "/public/get_book_summary_by_currency"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "kind": kind?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves the summary information such as open interest, 24h volume, etc. for a specific instrument.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetBookSummaryByInstrumentGet(instrumentName: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetBookSummaryByInstrumentGetWithRequestBuilder(instrumentName: instrumentName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves the summary information such as open interest, 24h volume, etc. for a specific instrument.
     - GET /public/get_book_summary_by_instrument
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetBookSummaryByInstrumentGetWithRequestBuilder(instrumentName: String) -> RequestBuilder<Any> {
        let path = "/public/get_book_summary_by_instrument"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves contract size of provided instrument.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetContractSizeGet(instrumentName: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetContractSizeGetWithRequestBuilder(instrumentName: instrumentName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves contract size of provided instrument.
     - GET /public/get_contract_size
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetContractSizeGetWithRequestBuilder(instrumentName: String) -> RequestBuilder<Any> {
        let path = "/public/get_contract_size"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves all cryptocurrencies supported by the API.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetCurrenciesGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetCurrenciesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves all cryptocurrencies supported by the API.
     - GET /public/get_currencies
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetCurrenciesGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/public/get_currencies"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter length
     */
    public enum Length_publicGetFundingChartDataGet: String {
        case _8h = "8h"
        case _24h = "24h"
    }

    /**
     Retrieve the latest user trades that have occurred for PERPETUAL instruments in a specific currency symbol and within given time range.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter length: (query) Specifies time period. &#x60;8h&#x60; - 8 hours, &#x60;24h&#x60; - 24 hours (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetFundingChartDataGet(instrumentName: String, length: Length_publicGetFundingChartDataGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetFundingChartDataGetWithRequestBuilder(instrumentName: instrumentName, length: length).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the latest user trades that have occurred for PERPETUAL instruments in a specific currency symbol and within given time range.
     - GET /public/get_funding_chart_data
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - parameter length: (query) Specifies time period. &#x60;8h&#x60; - 8 hours, &#x60;24h&#x60; - 24 hours (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetFundingChartDataGetWithRequestBuilder(instrumentName: String, length: Length_publicGetFundingChartDataGet? = nil) -> RequestBuilder<Any> {
        let path = "/public/get_funding_chart_data"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "length": length?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_publicGetHistoricalVolatilityGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Provides information about historical volatility for given cryptocurrency.
     
     - parameter currency: (query) The currency symbol 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetHistoricalVolatilityGet(currency: Currency_publicGetHistoricalVolatilityGet, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetHistoricalVolatilityGetWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Provides information about historical volatility for given cryptocurrency.
     - GET /public/get_historical_volatility
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetHistoricalVolatilityGetWithRequestBuilder(currency: Currency_publicGetHistoricalVolatilityGet) -> RequestBuilder<Any> {
        let path = "/public/get_historical_volatility"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_publicGetIndexGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Retrieves the current index price for the instruments, for the selected currency.
     
     - parameter currency: (query) The currency symbol 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetIndexGet(currency: Currency_publicGetIndexGet, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetIndexGetWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves the current index price for the instruments, for the selected currency.
     - GET /public/get_index
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetIndexGetWithRequestBuilder(currency: Currency_publicGetIndexGet) -> RequestBuilder<Any> {
        let path = "/public/get_index"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_publicGetInstrumentsGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter kind
     */
    public enum Kind_publicGetInstrumentsGet: String {
        case future = "future"
        case option = "option"
    }

    /**
     Retrieves available trading instruments. This method can be used to see which instruments are available for trading, or which instruments have existed historically.
     
     - parameter currency: (query) The currency symbol 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter expired: (query) Set to true to show expired instruments instead of active ones. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetInstrumentsGet(currency: Currency_publicGetInstrumentsGet, kind: Kind_publicGetInstrumentsGet? = nil, expired: Bool? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetInstrumentsGetWithRequestBuilder(currency: currency, kind: kind, expired: expired).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves available trading instruments. This method can be used to see which instruments are available for trading, or which instruments have existed historically.
     - GET /public/get_instruments
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter expired: (query) Set to true to show expired instruments instead of active ones. (optional, default to false)
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetInstrumentsGetWithRequestBuilder(currency: Currency_publicGetInstrumentsGet, kind: Kind_publicGetInstrumentsGet? = nil, expired: Bool? = nil) -> RequestBuilder<Any> {
        let path = "/public/get_instruments"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "kind": kind?.rawValue, 
            "expired": expired
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_publicGetLastSettlementsByCurrencyGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_publicGetLastSettlementsByCurrencyGet: String {
        case settlement = "settlement"
        case delivery = "delivery"
        case bankruptcy = "bankruptcy"
    }

    /**
     Retrieves historical settlement, delivery and bankruptcy events coming from all instruments within given currency.
     
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Settlement type (optional)
     - parameter count: (query) Number of requested items, default - &#x60;20&#x60; (optional)
     - parameter continuation: (query) Continuation token for pagination (optional)
     - parameter searchStartTimestamp: (query) The latest timestamp to return result for (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetLastSettlementsByCurrencyGet(currency: Currency_publicGetLastSettlementsByCurrencyGet, type: ModelType_publicGetLastSettlementsByCurrencyGet? = nil, count: Int? = nil, continuation: String? = nil, searchStartTimestamp: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetLastSettlementsByCurrencyGetWithRequestBuilder(currency: currency, type: type, count: count, continuation: continuation, searchStartTimestamp: searchStartTimestamp).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves historical settlement, delivery and bankruptcy events coming from all instruments within given currency.
     - GET /public/get_last_settlements_by_currency
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Settlement type (optional)
     - parameter count: (query) Number of requested items, default - &#x60;20&#x60; (optional)
     - parameter continuation: (query) Continuation token for pagination (optional)
     - parameter searchStartTimestamp: (query) The latest timestamp to return result for (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetLastSettlementsByCurrencyGetWithRequestBuilder(currency: Currency_publicGetLastSettlementsByCurrencyGet, type: ModelType_publicGetLastSettlementsByCurrencyGet? = nil, count: Int? = nil, continuation: String? = nil, searchStartTimestamp: Int? = nil) -> RequestBuilder<Any> {
        let path = "/public/get_last_settlements_by_currency"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "type": type?.rawValue, 
            "count": count?.encodeToJSON(), 
            "continuation": continuation, 
            "search_start_timestamp": searchStartTimestamp?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_publicGetLastSettlementsByInstrumentGet: String {
        case settlement = "settlement"
        case delivery = "delivery"
        case bankruptcy = "bankruptcy"
    }

    /**
     Retrieves historical public settlement, delivery and bankruptcy events filtered by instrument name.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter type: (query) Settlement type (optional)
     - parameter count: (query) Number of requested items, default - &#x60;20&#x60; (optional)
     - parameter continuation: (query) Continuation token for pagination (optional)
     - parameter searchStartTimestamp: (query) The latest timestamp to return result for (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetLastSettlementsByInstrumentGet(instrumentName: String, type: ModelType_publicGetLastSettlementsByInstrumentGet? = nil, count: Int? = nil, continuation: String? = nil, searchStartTimestamp: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetLastSettlementsByInstrumentGetWithRequestBuilder(instrumentName: instrumentName, type: type, count: count, continuation: continuation, searchStartTimestamp: searchStartTimestamp).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves historical public settlement, delivery and bankruptcy events filtered by instrument name.
     - GET /public/get_last_settlements_by_instrument
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - parameter type: (query) Settlement type (optional)
     - parameter count: (query) Number of requested items, default - &#x60;20&#x60; (optional)
     - parameter continuation: (query) Continuation token for pagination (optional)
     - parameter searchStartTimestamp: (query) The latest timestamp to return result for (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetLastSettlementsByInstrumentGetWithRequestBuilder(instrumentName: String, type: ModelType_publicGetLastSettlementsByInstrumentGet? = nil, count: Int? = nil, continuation: String? = nil, searchStartTimestamp: Int? = nil) -> RequestBuilder<Any> {
        let path = "/public/get_last_settlements_by_instrument"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "type": type?.rawValue, 
            "count": count?.encodeToJSON(), 
            "continuation": continuation, 
            "search_start_timestamp": searchStartTimestamp?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_publicGetLastTradesByCurrencyAndTimeGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter kind
     */
    public enum Kind_publicGetLastTradesByCurrencyAndTimeGet: String {
        case future = "future"
        case option = "option"
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_publicGetLastTradesByCurrencyAndTimeGet: String {
        case asc = "asc"
        case desc = "desc"
        case _default = "default"
    }

    /**
     Retrieve the latest trades that have occurred for instruments in a specific currency symbol and within given time range.
     
     - parameter currency: (query) The currency symbol 
     - parameter startTimestamp: (query) The earliest timestamp to return result for 
     - parameter endTimestamp: (query) The most recent timestamp to return result for 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetLastTradesByCurrencyAndTimeGet(currency: Currency_publicGetLastTradesByCurrencyAndTimeGet, startTimestamp: Int, endTimestamp: Int, kind: Kind_publicGetLastTradesByCurrencyAndTimeGet? = nil, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_publicGetLastTradesByCurrencyAndTimeGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetLastTradesByCurrencyAndTimeGetWithRequestBuilder(currency: currency, startTimestamp: startTimestamp, endTimestamp: endTimestamp, kind: kind, count: count, includeOld: includeOld, sorting: sorting).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the latest trades that have occurred for instruments in a specific currency symbol and within given time range.
     - GET /public/get_last_trades_by_currency_and_time
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter startTimestamp: (query) The earliest timestamp to return result for 
     - parameter endTimestamp: (query) The most recent timestamp to return result for 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetLastTradesByCurrencyAndTimeGetWithRequestBuilder(currency: Currency_publicGetLastTradesByCurrencyAndTimeGet, startTimestamp: Int, endTimestamp: Int, kind: Kind_publicGetLastTradesByCurrencyAndTimeGet? = nil, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_publicGetLastTradesByCurrencyAndTimeGet? = nil) -> RequestBuilder<Any> {
        let path = "/public/get_last_trades_by_currency_and_time"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "kind": kind?.rawValue, 
            "start_timestamp": startTimestamp.encodeToJSON(), 
            "end_timestamp": endTimestamp.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "include_old": includeOld, 
            "sorting": sorting?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_publicGetLastTradesByCurrencyGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter kind
     */
    public enum Kind_publicGetLastTradesByCurrencyGet: String {
        case future = "future"
        case option = "option"
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_publicGetLastTradesByCurrencyGet: String {
        case asc = "asc"
        case desc = "desc"
        case _default = "default"
    }

    /**
     Retrieve the latest trades that have occurred for instruments in a specific currency symbol.
     
     - parameter currency: (query) The currency symbol 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter startId: (query) The ID number of the first trade to be returned (optional)
     - parameter endId: (query) The ID number of the last trade to be returned (optional)
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetLastTradesByCurrencyGet(currency: Currency_publicGetLastTradesByCurrencyGet, kind: Kind_publicGetLastTradesByCurrencyGet? = nil, startId: String? = nil, endId: String? = nil, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_publicGetLastTradesByCurrencyGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetLastTradesByCurrencyGetWithRequestBuilder(currency: currency, kind: kind, startId: startId, endId: endId, count: count, includeOld: includeOld, sorting: sorting).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the latest trades that have occurred for instruments in a specific currency symbol.
     - GET /public/get_last_trades_by_currency
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter kind: (query) Instrument kind, if not provided instruments of all kinds are considered (optional)
     - parameter startId: (query) The ID number of the first trade to be returned (optional)
     - parameter endId: (query) The ID number of the last trade to be returned (optional)
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetLastTradesByCurrencyGetWithRequestBuilder(currency: Currency_publicGetLastTradesByCurrencyGet, kind: Kind_publicGetLastTradesByCurrencyGet? = nil, startId: String? = nil, endId: String? = nil, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_publicGetLastTradesByCurrencyGet? = nil) -> RequestBuilder<Any> {
        let path = "/public/get_last_trades_by_currency"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "kind": kind?.rawValue, 
            "start_id": startId, 
            "end_id": endId, 
            "count": count?.encodeToJSON(), 
            "include_old": includeOld, 
            "sorting": sorting?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_publicGetLastTradesByInstrumentAndTimeGet: String {
        case asc = "asc"
        case desc = "desc"
        case _default = "default"
    }

    /**
     Retrieve the latest trades that have occurred for a specific instrument and within given time range.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter startTimestamp: (query) The earliest timestamp to return result for 
     - parameter endTimestamp: (query) The most recent timestamp to return result for 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetLastTradesByInstrumentAndTimeGet(instrumentName: String, startTimestamp: Int, endTimestamp: Int, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_publicGetLastTradesByInstrumentAndTimeGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetLastTradesByInstrumentAndTimeGetWithRequestBuilder(instrumentName: instrumentName, startTimestamp: startTimestamp, endTimestamp: endTimestamp, count: count, includeOld: includeOld, sorting: sorting).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the latest trades that have occurred for a specific instrument and within given time range.
     - GET /public/get_last_trades_by_instrument_and_time
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - parameter startTimestamp: (query) The earliest timestamp to return result for 
     - parameter endTimestamp: (query) The most recent timestamp to return result for 
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetLastTradesByInstrumentAndTimeGetWithRequestBuilder(instrumentName: String, startTimestamp: Int, endTimestamp: Int, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_publicGetLastTradesByInstrumentAndTimeGet? = nil) -> RequestBuilder<Any> {
        let path = "/public/get_last_trades_by_instrument_and_time"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "start_timestamp": startTimestamp.encodeToJSON(), 
            "end_timestamp": endTimestamp.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "include_old": includeOld, 
            "sorting": sorting?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_publicGetLastTradesByInstrumentGet: String {
        case asc = "asc"
        case desc = "desc"
        case _default = "default"
    }

    /**
     Retrieve the latest trades that have occurred for a specific instrument.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter startSeq: (query) The sequence number of the first trade to be returned (optional)
     - parameter endSeq: (query) The sequence number of the last trade to be returned (optional)
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetLastTradesByInstrumentGet(instrumentName: String, startSeq: Int? = nil, endSeq: Int? = nil, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_publicGetLastTradesByInstrumentGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetLastTradesByInstrumentGetWithRequestBuilder(instrumentName: instrumentName, startSeq: startSeq, endSeq: endSeq, count: count, includeOld: includeOld, sorting: sorting).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the latest trades that have occurred for a specific instrument.
     - GET /public/get_last_trades_by_instrument
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - parameter startSeq: (query) The sequence number of the first trade to be returned (optional)
     - parameter endSeq: (query) The sequence number of the last trade to be returned (optional)
     - parameter count: (query) Number of requested items, default - &#x60;10&#x60; (optional)
     - parameter includeOld: (query) Include trades older than 7 days, default - &#x60;false&#x60; (optional)
     - parameter sorting: (query) Direction of results sorting (&#x60;default&#x60; value means no sorting, results will be returned in order in which they left the database) (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetLastTradesByInstrumentGetWithRequestBuilder(instrumentName: String, startSeq: Int? = nil, endSeq: Int? = nil, count: Int? = nil, includeOld: Bool? = nil, sorting: Sorting_publicGetLastTradesByInstrumentGet? = nil) -> RequestBuilder<Any> {
        let path = "/public/get_last_trades_by_instrument"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "start_seq": startSeq?.encodeToJSON(), 
            "end_seq": endSeq?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "include_old": includeOld, 
            "sorting": sorting?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves the order book, along with other market values for a given instrument.
     
     - parameter instrumentName: (query) The instrument name for which to retrieve the order book, see [&#x60;getinstruments&#x60;](#getinstruments) to obtain instrument names. 
     - parameter depth: (query) The number of entries to return for bids and asks. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetOrderBookGet(instrumentName: String, depth: Double? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetOrderBookGetWithRequestBuilder(instrumentName: instrumentName, depth: depth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves the order book, along with other market values for a given instrument.
     - GET /public/get_order_book
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) The instrument name for which to retrieve the order book, see [&#x60;getinstruments&#x60;](#getinstruments) to obtain instrument names. 
     - parameter depth: (query) The number of entries to return for bids and asks. (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetOrderBookGetWithRequestBuilder(instrumentName: String, depth: Double? = nil) -> RequestBuilder<Any> {
        let path = "/public/get_order_book"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "depth": depth
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves the current time (in milliseconds). This API endpoint can be used to check the clock skew between your software and Deribit's systems.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetTimeGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetTimeGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves the current time (in milliseconds). This API endpoint can be used to check the clock skew between your software and Deribit's systems.
     - GET /public/get_time
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetTimeGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/public/get_time"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves aggregated 24h trade volumes for different instrument types and currencies.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetTradeVolumesGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetTradeVolumesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves aggregated 24h trade volumes for different instrument types and currencies.
     - GET /public/get_trade_volumes
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetTradeVolumesGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/public/get_trade_volumes"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Publicly available market data used to generate a TradingView candle chart.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter startTimestamp: (query) The earliest timestamp to return result for 
     - parameter endTimestamp: (query) The most recent timestamp to return result for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetTradingviewChartDataGet(instrumentName: String, startTimestamp: Int, endTimestamp: Int, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetTradingviewChartDataGetWithRequestBuilder(instrumentName: instrumentName, startTimestamp: startTimestamp, endTimestamp: endTimestamp).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Publicly available market data used to generate a TradingView candle chart.
     - GET /public/get_tradingview_chart_data
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - parameter startTimestamp: (query) The earliest timestamp to return result for 
     - parameter endTimestamp: (query) The most recent timestamp to return result for 
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetTradingviewChartDataGetWithRequestBuilder(instrumentName: String, startTimestamp: Int, endTimestamp: Int) -> RequestBuilder<Any> {
        let path = "/public/get_tradingview_chart_data"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName, 
            "start_timestamp": startTimestamp.encodeToJSON(), 
            "end_timestamp": endTimestamp.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter expectedResult
     */
    public enum ExpectedResult_publicTestGet: String {
        case exception = "exception"
    }

    /**
     Tests the connection to the API server, and returns its version. You can use this to make sure the API is reachable, and matches the expected version.
     
     - parameter expectedResult: (query) The value \&quot;exception\&quot; will trigger an error response. This may be useful for testing wrapper libraries. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicTestGet(expectedResult: ExpectedResult_publicTestGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicTestGetWithRequestBuilder(expectedResult: expectedResult).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Tests the connection to the API server, and returns its version. You can use this to make sure the API is reachable, and matches the expected version.
     - GET /public/test
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter expectedResult: (query) The value \&quot;exception\&quot; will trigger an error response. This may be useful for testing wrapper libraries. (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func publicTestGetWithRequestBuilder(expectedResult: ExpectedResult_publicTestGet? = nil) -> RequestBuilder<Any> {
        let path = "/public/test"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expected_result": expectedResult?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get ticker for an instrument.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicTickerGet(instrumentName: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicTickerGetWithRequestBuilder(instrumentName: instrumentName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get ticker for an instrument.
     - GET /public/ticker
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - returns: RequestBuilder<Any> 
     */
    open class func publicTickerGetWithRequestBuilder(instrumentName: String) -> RequestBuilder<Any> {
        let path = "/public/ticker"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Method used to introduce the client software connected to Deribit platform over websocket. Provided data may have an impact on the maintained connection and will be collected for internal statistical purposes. In response, Deribit will also introduce itself.
     
     - parameter field: (query) Name of the field to be validated, examples: postal_code, date_of_birth 
     - parameter value: (query) Value to be checked 
     - parameter value2: (query) Additional value to be compared with (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicValidateFieldGet(field: String, value: String, value2: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicValidateFieldGetWithRequestBuilder(field: field, value: value, value2: value2).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Method used to introduce the client software connected to Deribit platform over websocket. Provided data may have an impact on the maintained connection and will be collected for internal statistical purposes. In response, Deribit will also introduce itself.
     - GET /public/validate_field
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter field: (query) Name of the field to be validated, examples: postal_code, date_of_birth 
     - parameter value: (query) Value to be checked 
     - parameter value2: (query) Additional value to be compared with (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func publicValidateFieldGetWithRequestBuilder(field: String, value: String, value2: String? = nil) -> RequestBuilder<Any> {
        let path = "/public/validate_field"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "field": field, 
            "value": value, 
            "value2": value2
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
