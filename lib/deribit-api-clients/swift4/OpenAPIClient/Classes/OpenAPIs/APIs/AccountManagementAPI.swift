//
// AccountManagementAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class AccountManagementAPI {
    /**
     Change the user name for a subaccount
     
     - parameter sid: (query) The user id for the subaccount 
     - parameter name: (query) The new user name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateChangeSubaccountNameGet(sid: Int, name: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateChangeSubaccountNameGetWithRequestBuilder(sid: sid, name: name).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Change the user name for a subaccount
     - GET /private/change_subaccount_name
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter sid: (query) The user id for the subaccount 
     - parameter name: (query) The new user name 
     - returns: RequestBuilder<Any> 
     */
    open class func privateChangeSubaccountNameGetWithRequestBuilder(sid: Int, name: String) -> RequestBuilder<Any> {
        let path = "/private/change_subaccount_name"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sid": sid.encodeToJSON(), 
            "name": name
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new subaccount
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateCreateSubaccountGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateCreateSubaccountGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Create a new subaccount
     - GET /private/create_subaccount
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func privateCreateSubaccountGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/private/create_subaccount"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable two factor authentication for a subaccount.
     
     - parameter sid: (query) The user id for the subaccount 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateDisableTfaForSubaccountGet(sid: Int, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateDisableTfaForSubaccountGetWithRequestBuilder(sid: sid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Disable two factor authentication for a subaccount.
     - GET /private/disable_tfa_for_subaccount
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter sid: (query) The user id for the subaccount 
     - returns: RequestBuilder<Any> 
     */
    open class func privateDisableTfaForSubaccountGetWithRequestBuilder(sid: Int) -> RequestBuilder<Any> {
        let path = "/private/disable_tfa_for_subaccount"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sid": sid.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetAccountSummaryGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Retrieves user account summary.
     
     - parameter currency: (query) The currency symbol 
     - parameter extended: (query) Include additional fields (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetAccountSummaryGet(currency: Currency_privateGetAccountSummaryGet, extended: Bool? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetAccountSummaryGetWithRequestBuilder(currency: currency, extended: extended).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves user account summary.
     - GET /private/get_account_summary
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter extended: (query) Include additional fields (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetAccountSummaryGetWithRequestBuilder(currency: Currency_privateGetAccountSummaryGet, extended: Bool? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_account_summary"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "extended": extended
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves the language to be used for emails.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetEmailLanguageGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetEmailLanguageGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves the language to be used for emails.
     - GET /private/get_email_language
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetEmailLanguageGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/private/get_email_language"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves announcements that have not been marked read by the user.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetNewAnnouncementsGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetNewAnnouncementsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves announcements that have not been marked read by the user.
     - GET /private/get_new_announcements
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetNewAnnouncementsGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/private/get_new_announcements"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve user position.
     
     - parameter instrumentName: (query) Instrument name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetPositionGet(instrumentName: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetPositionGetWithRequestBuilder(instrumentName: instrumentName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve user position.
     - GET /private/get_position
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter instrumentName: (query) Instrument name 
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetPositionGetWithRequestBuilder(instrumentName: String) -> RequestBuilder<Any> {
        let path = "/private/get_position"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "instrument_name": instrumentName
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetPositionsGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter kind
     */
    public enum Kind_privateGetPositionsGet: String {
        case future = "future"
        case option = "option"
    }

    /**
     Retrieve user positions.
     
     - parameter currency: (query)  
     - parameter kind: (query) Kind filter on positions (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetPositionsGet(currency: Currency_privateGetPositionsGet, kind: Kind_privateGetPositionsGet? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetPositionsGetWithRequestBuilder(currency: currency, kind: kind).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve user positions.
     - GET /private/get_positions
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query)  
     - parameter kind: (query) Kind filter on positions (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetPositionsGetWithRequestBuilder(currency: Currency_privateGetPositionsGet, kind: Kind_privateGetPositionsGet? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_positions"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "kind": kind?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get information about subaccounts
     
     - parameter withPortfolio: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetSubaccountsGet(withPortfolio: Bool? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetSubaccountsGetWithRequestBuilder(withPortfolio: withPortfolio).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get information about subaccounts
     - GET /private/get_subaccounts
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter withPortfolio: (query)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetSubaccountsGetWithRequestBuilder(withPortfolio: Bool? = nil) -> RequestBuilder<Any> {
        let path = "/private/get_subaccounts"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "with_portfolio": withPortfolio
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Marks an announcement as read, so it will not be shown in `get_new_announcements`.
     
     - parameter announcementId: (query) the ID of the announcement 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSetAnnouncementAsReadGet(announcementId: Double, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSetAnnouncementAsReadGetWithRequestBuilder(announcementId: announcementId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Marks an announcement as read, so it will not be shown in `get_new_announcements`.
     - GET /private/set_announcement_as_read
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter announcementId: (query) the ID of the announcement 
     - returns: RequestBuilder<Any> 
     */
    open class func privateSetAnnouncementAsReadGetWithRequestBuilder(announcementId: Double) -> RequestBuilder<Any> {
        let path = "/private/set_announcement_as_read"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "announcement_id": announcementId
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Assign an email address to a subaccount. User will receive an email with confirmation link.
     
     - parameter sid: (query) The user id for the subaccount 
     - parameter email: (query) The email address for the subaccount 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSetEmailForSubaccountGet(sid: Int, email: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSetEmailForSubaccountGetWithRequestBuilder(sid: sid, email: email).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Assign an email address to a subaccount. User will receive an email with confirmation link.
     - GET /private/set_email_for_subaccount
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter sid: (query) The user id for the subaccount 
     - parameter email: (query) The email address for the subaccount 
     - returns: RequestBuilder<Any> 
     */
    open class func privateSetEmailForSubaccountGetWithRequestBuilder(sid: Int, email: String) -> RequestBuilder<Any> {
        let path = "/private/set_email_for_subaccount"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sid": sid.encodeToJSON(), 
            "email": email
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Changes the language to be used for emails.
     
     - parameter language: (query) The abbreviated language name. Valid values include &#x60;\&quot;en\&quot;&#x60;, &#x60;\&quot;ko\&quot;&#x60;, &#x60;\&quot;zh\&quot;&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSetEmailLanguageGet(language: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSetEmailLanguageGetWithRequestBuilder(language: language).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Changes the language to be used for emails.
     - GET /private/set_email_language
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter language: (query) The abbreviated language name. Valid values include &#x60;\&quot;en\&quot;&#x60;, &#x60;\&quot;ko\&quot;&#x60;, &#x60;\&quot;zh\&quot;&#x60; 
     - returns: RequestBuilder<Any> 
     */
    open class func privateSetEmailLanguageGetWithRequestBuilder(language: String) -> RequestBuilder<Any> {
        let path = "/private/set_email_language"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "language": language
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set the password for the subaccount
     
     - parameter sid: (query) The user id for the subaccount 
     - parameter password: (query) The password for the subaccount 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSetPasswordForSubaccountGet(sid: Int, password: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSetPasswordForSubaccountGetWithRequestBuilder(sid: sid, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Set the password for the subaccount
     - GET /private/set_password_for_subaccount
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter sid: (query) The user id for the subaccount 
     - parameter password: (query) The password for the subaccount 
     - returns: RequestBuilder<Any> 
     */
    open class func privateSetPasswordForSubaccountGetWithRequestBuilder(sid: Int, password: String) -> RequestBuilder<Any> {
        let path = "/private/set_password_for_subaccount"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sid": sid.encodeToJSON(), 
            "password": password
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable or disable sending of notifications for the subaccount.
     
     - parameter sid: (query) The user id for the subaccount 
     - parameter state: (query) enable (&#x60;true&#x60;) or disable (&#x60;false&#x60;) notifications 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateToggleNotificationsFromSubaccountGet(sid: Int, state: Bool, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateToggleNotificationsFromSubaccountGetWithRequestBuilder(sid: sid, state: state).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Enable or disable sending of notifications for the subaccount.
     - GET /private/toggle_notifications_from_subaccount
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter sid: (query) The user id for the subaccount 
     - parameter state: (query) enable (&#x60;true&#x60;) or disable (&#x60;false&#x60;) notifications 
     - returns: RequestBuilder<Any> 
     */
    open class func privateToggleNotificationsFromSubaccountGetWithRequestBuilder(sid: Int, state: Bool) -> RequestBuilder<Any> {
        let path = "/private/toggle_notifications_from_subaccount"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sid": sid.encodeToJSON(), 
            "state": state
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter state
     */
    public enum State_privateToggleSubaccountLoginGet: String {
        case enable = "enable"
        case disable = "disable"
    }

    /**
     Enable or disable login for a subaccount. If login is disabled and a session for the subaccount exists, this session will be terminated.
     
     - parameter sid: (query) The user id for the subaccount 
     - parameter state: (query) enable or disable login. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateToggleSubaccountLoginGet(sid: Int, state: State_privateToggleSubaccountLoginGet, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateToggleSubaccountLoginGetWithRequestBuilder(sid: sid, state: state).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Enable or disable login for a subaccount. If login is disabled and a session for the subaccount exists, this session will be terminated.
     - GET /private/toggle_subaccount_login
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter sid: (query) The user id for the subaccount 
     - parameter state: (query) enable or disable login. 
     - returns: RequestBuilder<Any> 
     */
    open class func privateToggleSubaccountLoginGetWithRequestBuilder(sid: Int, state: State_privateToggleSubaccountLoginGet) -> RequestBuilder<Any> {
        let path = "/private/toggle_subaccount_login"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sid": sid.encodeToJSON(), 
            "state": state.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves announcements from the last 30 days.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetAnnouncementsGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetAnnouncementsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves announcements from the last 30 days.
     - GET /public/get_announcements
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetAnnouncementsGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/public/get_announcements"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
