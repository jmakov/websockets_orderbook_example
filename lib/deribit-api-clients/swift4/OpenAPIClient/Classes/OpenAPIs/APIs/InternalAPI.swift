//
// InternalAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class InternalAPI {
    /**
     * enum for parameter currency
     */
    public enum Currency_privateAddToAddressBookGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateAddToAddressBookGet: String {
        case transfer = "transfer"
        case withdrawal = "withdrawal"
    }

    /**
     Adds new entry to address book of given type
     
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter name: (query) Name of address book entry 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateAddToAddressBookGet(currency: Currency_privateAddToAddressBookGet, type: ModelType_privateAddToAddressBookGet, address: String, name: String, tfa: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateAddToAddressBookGetWithRequestBuilder(currency: currency, type: type, address: address, name: name, tfa: tfa).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Adds new entry to address book of given type
     - GET /private/add_to_address_book
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter name: (query) Name of address book entry 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateAddToAddressBookGetWithRequestBuilder(currency: Currency_privateAddToAddressBookGet, type: ModelType_privateAddToAddressBookGet, address: String, name: String, tfa: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/add_to_address_book"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "type": type.rawValue, 
            "address": address, 
            "name": name, 
            "tfa": tfa
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disables TFA with one time recovery code
     
     - parameter password: (query) The password for the subaccount 
     - parameter code: (query) One time recovery code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateDisableTfaWithRecoveryCodeGet(password: String, code: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateDisableTfaWithRecoveryCodeGetWithRequestBuilder(password: password, code: code).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Disables TFA with one time recovery code
     - GET /private/disable_tfa_with_recovery_code
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter password: (query) The password for the subaccount 
     - parameter code: (query) One time recovery code 
     - returns: RequestBuilder<Any> 
     */
    open class func privateDisableTfaWithRecoveryCodeGetWithRequestBuilder(password: String, code: String) -> RequestBuilder<Any> {
        let path = "/private/disable_tfa_with_recovery_code"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "password": password, 
            "code": code
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateGetAddressBookGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateGetAddressBookGet: String {
        case transfer = "transfer"
        case withdrawal = "withdrawal"
    }

    /**
     Retrieves address book of given type
     
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateGetAddressBookGet(currency: Currency_privateGetAddressBookGet, type: ModelType_privateGetAddressBookGet, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateGetAddressBookGetWithRequestBuilder(currency: currency, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieves address book of given type
     - GET /private/get_address_book
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - returns: RequestBuilder<Any> 
     */
    open class func privateGetAddressBookGetWithRequestBuilder(currency: Currency_privateGetAddressBookGet, type: ModelType_privateGetAddressBookGet) -> RequestBuilder<Any> {
        let path = "/private/get_address_book"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "type": type.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateRemoveFromAddressBookGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_privateRemoveFromAddressBookGet: String {
        case transfer = "transfer"
        case withdrawal = "withdrawal"
    }

    /**
     Adds new entry to address book of given type
     
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateRemoveFromAddressBookGet(currency: Currency_privateRemoveFromAddressBookGet, type: ModelType_privateRemoveFromAddressBookGet, address: String, tfa: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateRemoveFromAddressBookGetWithRequestBuilder(currency: currency, type: type, address: address, tfa: tfa).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Adds new entry to address book of given type
     - GET /private/remove_from_address_book
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter type: (query) Address book type 
     - parameter address: (query) Address in currency format, it must be in address book 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateRemoveFromAddressBookGetWithRequestBuilder(currency: Currency_privateRemoveFromAddressBookGet, type: ModelType_privateRemoveFromAddressBookGet, address: String, tfa: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/remove_from_address_book"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "type": type.rawValue, 
            "address": address, 
            "tfa": tfa
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateSubmitTransferToSubaccountGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Transfer funds to a subaccount.
     
     - parameter currency: (query) The currency symbol 
     - parameter amount: (query) Amount of funds to be transferred 
     - parameter destination: (query) Id of destination subaccount 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSubmitTransferToSubaccountGet(currency: Currency_privateSubmitTransferToSubaccountGet, amount: Double, destination: Int, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSubmitTransferToSubaccountGetWithRequestBuilder(currency: currency, amount: amount, destination: destination).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Transfer funds to a subaccount.
     - GET /private/submit_transfer_to_subaccount
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter amount: (query) Amount of funds to be transferred 
     - parameter destination: (query) Id of destination subaccount 
     - returns: RequestBuilder<Any> 
     */
    open class func privateSubmitTransferToSubaccountGetWithRequestBuilder(currency: Currency_privateSubmitTransferToSubaccountGet, amount: Double, destination: Int) -> RequestBuilder<Any> {
        let path = "/private/submit_transfer_to_subaccount"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "amount": amount, 
            "destination": destination.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateSubmitTransferToUserGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Transfer funds to a another user.
     
     - parameter currency: (query) The currency symbol 
     - parameter amount: (query) Amount of funds to be transferred 
     - parameter destination: (query) Destination address from address book 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSubmitTransferToUserGet(currency: Currency_privateSubmitTransferToUserGet, amount: Double, destination: String, tfa: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSubmitTransferToUserGetWithRequestBuilder(currency: currency, amount: amount, destination: destination, tfa: tfa).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Transfer funds to a another user.
     - GET /private/submit_transfer_to_user
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter amount: (query) Amount of funds to be transferred 
     - parameter destination: (query) Destination address from address book 
     - parameter tfa: (query) TFA code, required when TFA is enabled for current account (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func privateSubmitTransferToUserGetWithRequestBuilder(currency: Currency_privateSubmitTransferToUserGet, amount: Double, destination: String, tfa: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/submit_transfer_to_user"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "amount": amount, 
            "destination": destination, 
            "tfa": tfa
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_privateToggleDepositAddressCreationGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Enable or disable deposit address creation
     
     - parameter currency: (query) The currency symbol 
     - parameter state: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateToggleDepositAddressCreationGet(currency: Currency_privateToggleDepositAddressCreationGet, state: Bool, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateToggleDepositAddressCreationGetWithRequestBuilder(currency: currency, state: state).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Enable or disable deposit address creation
     - GET /private/toggle_deposit_address_creation
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - parameter state: (query)  
     - returns: RequestBuilder<Any> 
     */
    open class func privateToggleDepositAddressCreationGetWithRequestBuilder(currency: Currency_privateToggleDepositAddressCreationGet, state: Bool) -> RequestBuilder<Any> {
        let path = "/private/toggle_deposit_address_creation"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue, 
            "state": state
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get information to be displayed in the footer of the website.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetFooterGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetFooterGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get information to be displayed in the footer of the website.
     - GET /public/get_footer
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetFooterGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/public/get_footer"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_publicGetOptionMarkPricesGet: String {
        case btc = "BTC"
        case eth = "ETH"
    }

    /**
     Retrives market prices and its implied volatility of options instruments
     
     - parameter currency: (query) The currency symbol 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicGetOptionMarkPricesGet(currency: Currency_publicGetOptionMarkPricesGet, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicGetOptionMarkPricesGetWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrives market prices and its implied volatility of options instruments
     - GET /public/get_option_mark_prices
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter currency: (query) The currency symbol 
     - returns: RequestBuilder<Any> 
     */
    open class func publicGetOptionMarkPricesGetWithRequestBuilder(currency: Currency_publicGetOptionMarkPricesGet) -> RequestBuilder<Any> {
        let path = "/public/get_option_mark_prices"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": currency.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Method used to introduce the client software connected to Deribit platform over websocket. Provided data may have an impact on the maintained connection and will be collected for internal statistical purposes. In response, Deribit will also introduce itself.
     
     - parameter field: (query) Name of the field to be validated, examples: postal_code, date_of_birth 
     - parameter value: (query) Value to be checked 
     - parameter value2: (query) Additional value to be compared with (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicValidateFieldGet(field: String, value: String, value2: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicValidateFieldGetWithRequestBuilder(field: field, value: value, value2: value2).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Method used to introduce the client software connected to Deribit platform over websocket. Provided data may have an impact on the maintained connection and will be collected for internal statistical purposes. In response, Deribit will also introduce itself.
     - GET /public/validate_field
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter field: (query) Name of the field to be validated, examples: postal_code, date_of_birth 
     - parameter value: (query) Value to be checked 
     - parameter value2: (query) Additional value to be compared with (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func publicValidateFieldGetWithRequestBuilder(field: String, value: String, value2: String? = nil) -> RequestBuilder<Any> {
        let path = "/public/validate_field"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "field": field, 
            "value": value, 
            "value2": value2
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
