//
// TransferItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



public struct TransferItem: Codable {

    public enum Direction: String, Codable {
        case payment = "payment"
        case income = "income"
    }
    public enum Currency: String, Codable {
        case btc = "BTC"
        case eth = "ETH"
    }
    public enum State: String, Codable {
        case prepared = "prepared"
        case confirmed = "confirmed"
        case cancelled = "cancelled"
        case waitingForAdmin = "waiting_for_admin"
        case rejectionReason = "rejection_reason"
    }
    public enum ModelType: String, Codable {
        case user = "user"
        case subaccount = "subaccount"
    }
    /** The timestamp (seconds since the Unix epoch, with millisecond precision) */
    public var updatedTimestamp: Int
    /** Transfer direction */
    public var direction: Direction?
    /** Amount of funds in given currency */
    public var amount: Double
    /** For transfer from/to subaccount returns this subaccount name, for transfer to other account returns address, for transfer from other account returns that accounts username. */
    public var otherSide: String
    /** Currency, i.e &#x60;\&quot;BTC\&quot;&#x60;, &#x60;\&quot;ETH\&quot;&#x60; */
    public var currency: Currency
    /** Transfer state, allowed values : &#x60;prepared&#x60;, &#x60;confirmed&#x60;, &#x60;cancelled&#x60;, &#x60;waiting_for_admin&#x60;, &#x60;rejection_reason&#x60; */
    public var state: State
    /** The timestamp (seconds since the Unix epoch, with millisecond precision) */
    public var createdTimestamp: Int
    /** Type of transfer: &#x60;user&#x60; - sent to user, &#x60;subaccount&#x60; - sent to subaccount */
    public var type: ModelType
    /** Id of transfer */
    public var id: Int

    public init(updatedTimestamp: Int, direction: Direction?, amount: Double, otherSide: String, currency: Currency, state: State, createdTimestamp: Int, type: ModelType, id: Int) {
        self.updatedTimestamp = updatedTimestamp
        self.direction = direction
        self.amount = amount
        self.otherSide = otherSide
        self.currency = currency
        self.state = state
        self.createdTimestamp = createdTimestamp
        self.type = type
        self.id = id
    }

    public enum CodingKeys: String, CodingKey { 
        case updatedTimestamp = "updated_timestamp"
        case direction
        case amount
        case otherSide = "other_side"
        case currency
        case state
        case createdTimestamp = "created_timestamp"
        case type
        case id
    }


}

